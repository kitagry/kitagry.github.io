{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/css/images/icon.jpg","path":"css/images/icon.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/css/images/go-learner/go-learner-architecture.png","path":"css/images/go-learner/go-learner-architecture.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":0},{"_id":"source/css/images/efm-langserver.png","path":"css/images/efm-langserver.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/css/images/go-learner/spread-sheet.png","path":"css/images/go-learner/spread-sheet.png","modified":0,"renderable":0},{"_id":"source/css/images/go-learner/go-learner-example.png","path":"css/images/go-learner/go-learner-example.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1572585125158},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1572585125159},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1572585125126},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1572585125126},{"_id":"themes/landscape/_config.yml","hash":"53a31b171a5f445b020b7fcbc006cb4df4757571","modified":1574175708939},{"_id":"source/_posts/go-learner-background.md","hash":"66faa9e627b7aa270dffc6ac7c939156a37ab168","modified":1573377510305},{"_id":"source/_posts/read-book-2019-11.md","hash":"74d1f83f23232cbcc10dfe5b5ca4249236945fc8","modified":1575296869137},{"_id":"source/_posts/hello-world.md","hash":"38b094c615fce435b0b81d4e2db018e456586861","modified":1572601243757},{"_id":"source/_posts/efm-langserver.md","hash":"f77a00fa0ac5fa6f0a6c7da141a0ae4d9cf014e9","modified":1574173785521},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1572585125155},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1572585125154},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1572585125154},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1572585125156},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1572585125156},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1572585125155},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1572585125157},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1572585125157},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1572585125155},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1572585125156},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1572585125157},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1572585125157},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1572585125127},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1572585125128},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1572585125128},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1572585125129},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1572585125160},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572585125127},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1572585125128},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572585125136},{"_id":"source/_posts/hexo-setting.md","hash":"4243dfb9253202f4a4b294cb47f4def2ef4f71f1","modified":1572774627952},{"_id":"source/about/me.md","hash":"c0648d5ab3cf35c5fe485ad20f206bd3a4f29717","modified":1572776119997},{"_id":"source/css/images/icon.jpg","hash":"4af05f42c713334692f9b9e73a81ee968ef4a338","modified":1572775261094},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1572585125132},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1572585125134},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1572585125135},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1574175516357},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1572585125133},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1572585125132},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1572585125133},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1572585125134},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1572585125135},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"acef401115f89f72a51c8f0f223f27a27a4e311f","modified":1573454363116},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1572585125135},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1572585125137},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1572585125138},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1572585125136},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"db9786eaf84a201fcb4d53208c685ab36c61d239","modified":1574175904926},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1572585125153},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1572585125137},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1572585125150},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572585125141},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572585125139},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572585125140},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572585125142},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1572585125139},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1572585125140},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572585125141},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1572585125139},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572585125141},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1572585125146},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1572585125153},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1572585125131},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1572585125130},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1572585125131},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1572585125131},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1572585125147},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1572585125130},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1572585125150},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1572585125148},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1572585125150},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1572585125147},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1572585125148},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1572585125148},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1572585125145},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1572585125130},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1572585125145},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1572585125151},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1572585125152},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1572585125152},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572585125142},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572585125144},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572585125143},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1572585125143},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1572585125144},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1572585125143},{"_id":"source/css/images/go-learner/go-learner-architecture.png","hash":"621446ea37abf4c08c911f434e474b3e33d2128e","modified":1573290624319},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1572585125152},{"_id":"source/css/images/banner.jpg","hash":"160f6d2d5bd235a2794667a0306020073ecf1a49","modified":1572618483107},{"_id":"source/css/images/efm-langserver.png","hash":"e585b8536c96d59c329ed281664ebb0422f67a60","modified":1574173464252},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1572585125151},{"_id":"source/css/images/go-learner/spread-sheet.png","hash":"c9b930f84954ff81cb6efc2d3043d0b51d6fce88","modified":1573291400529},{"_id":"source/css/images/go-learner/go-learner-example.png","hash":"b62820c86e337d7557a74d4c41ff016dff69ecd3","modified":1573284371260},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"160f6d2d5bd235a2794667a0306020073ecf1a49","modified":1572600614401}],"Category":[],"Data":[],"Page":[{"title":"About me","date":"2019-11-01T08:55:37.000Z","_content":"\n<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n**名前**\n北川 亮\n\n**所属**\n京都大学大学院修士1年 情報学研究科 神田研究室所属\n\n**趣味**\n読書・プログラミング・ドラム\n\n**好きな言語**\nGolang\n最近はRustを勉強中\n\n<br style=\"clear:left;\">\n\n## このサイトの目的\n\n\nこのサイトは自分がこれは知っていてよかったなという技術スタックを貯めるための場所として使おうと思っています。なので、比較的技術的なことを多めに書く予定です。\n\nまた、僕は読書が好きなので、本についてまとめられたらいいなあと思いながら挫折し続けています。なので、本について書くことはほとんど無いかと思いますが、いつかやりたいと思っています。(月一くらいでおすすめ本をまとめたら面白いかも？)\n\n\n## その他のアカウント\n\n**Github**\nhttps://github.com/kitagry\n\n**Twitter**\nhttps://twitter.com/kitagry\n\n**Qiita**\nhttps://qiita.com/kitagry\nただし、Qiitaについては徐々にこちらに移して行こうかなと思ってます。\n","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2019-11-01 17:55:37\n---\n\n<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n**名前**\n北川 亮\n\n**所属**\n京都大学大学院修士1年 情報学研究科 神田研究室所属\n\n**趣味**\n読書・プログラミング・ドラム\n\n**好きな言語**\nGolang\n最近はRustを勉強中\n\n<br style=\"clear:left;\">\n\n## このサイトの目的\n\n\nこのサイトは自分がこれは知っていてよかったなという技術スタックを貯めるための場所として使おうと思っています。なので、比較的技術的なことを多めに書く予定です。\n\nまた、僕は読書が好きなので、本についてまとめられたらいいなあと思いながら挫折し続けています。なので、本について書くことはほとんど無いかと思いますが、いつかやりたいと思っています。(月一くらいでおすすめ本をまとめたら面白いかも？)\n\n\n## その他のアカウント\n\n**Github**\nhttps://github.com/kitagry\n\n**Twitter**\nhttps://twitter.com/kitagry\n\n**Qiita**\nhttps://qiita.com/kitagry\nただし、Qiitaについては徐々にこちらに移して行こうかなと思ってます。\n","updated":"2019-11-03T10:15:19.997Z","path":"about/me.html","comments":1,"layout":"page","_id":"ck3oj342g000lzqpgh18q8z1c","content":"<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n<p><strong>名前</strong><br>北川 亮</p>\n<p><strong>所属</strong><br>京都大学大学院修士1年 情報学研究科 神田研究室所属</p>\n<p><strong>趣味</strong><br>読書・プログラミング・ドラム</p>\n<p><strong>好きな言語</strong><br>Golang<br>最近はRustを勉強中</p>\n<br style=\"clear:left;\">\n\n<h2 id=\"このサイトの目的\"><a href=\"#このサイトの目的\" class=\"headerlink\" title=\"このサイトの目的\"></a>このサイトの目的</h2><p>このサイトは自分がこれは知っていてよかったなという技術スタックを貯めるための場所として使おうと思っています。なので、比較的技術的なことを多めに書く予定です。</p>\n<p>また、僕は読書が好きなので、本についてまとめられたらいいなあと思いながら挫折し続けています。なので、本について書くことはほとんど無いかと思いますが、いつかやりたいと思っています。(月一くらいでおすすめ本をまとめたら面白いかも？)</p>\n<h2 id=\"その他のアカウント\"><a href=\"#その他のアカウント\" class=\"headerlink\" title=\"その他のアカウント\"></a>その他のアカウント</h2><p><strong>Github</strong><br><a href=\"https://github.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry</a></p>\n<p><strong>Twitter</strong><br><a href=\"https://twitter.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://twitter.com/kitagry</a></p>\n<p><strong>Qiita</strong><br><a href=\"https://qiita.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://qiita.com/kitagry</a><br>ただし、Qiitaについては徐々にこちらに移して行こうかなと思ってます。</p>\n","site":{"data":{}},"excerpt":"","more":"<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n<p><strong>名前</strong><br>北川 亮</p>\n<p><strong>所属</strong><br>京都大学大学院修士1年 情報学研究科 神田研究室所属</p>\n<p><strong>趣味</strong><br>読書・プログラミング・ドラム</p>\n<p><strong>好きな言語</strong><br>Golang<br>最近はRustを勉強中</p>\n<br style=\"clear:left;\">\n\n<h2 id=\"このサイトの目的\"><a href=\"#このサイトの目的\" class=\"headerlink\" title=\"このサイトの目的\"></a>このサイトの目的</h2><p>このサイトは自分がこれは知っていてよかったなという技術スタックを貯めるための場所として使おうと思っています。なので、比較的技術的なことを多めに書く予定です。</p>\n<p>また、僕は読書が好きなので、本についてまとめられたらいいなあと思いながら挫折し続けています。なので、本について書くことはほとんど無いかと思いますが、いつかやりたいと思っています。(月一くらいでおすすめ本をまとめたら面白いかも？)</p>\n<h2 id=\"その他のアカウント\"><a href=\"#その他のアカウント\" class=\"headerlink\" title=\"その他のアカウント\"></a>その他のアカウント</h2><p><strong>Github</strong><br><a href=\"https://github.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry</a></p>\n<p><strong>Twitter</strong><br><a href=\"https://twitter.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://twitter.com/kitagry</a></p>\n<p><strong>Qiita</strong><br><a href=\"https://qiita.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://qiita.com/kitagry</a><br>ただし、Qiitaについては徐々にこちらに移して行こうかなと思ってます。</p>\n"}],"Post":[{"title":"読書内容を覚えるためのライフハック作った","date":"2019-11-09T05:49:03.000Z","_content":"\n僕はライフハックが結構好きで、自分でも色々考えてはあれやこれやと試したりしてます。\n今回はその中でプログラミングを用いたライフハックが今の所結構いい感じなのでブログにしたためようと思います。\n\n### 作ったものの背景\n\n僕はかなり読書が好きで、しばしば自分の貯金を圧迫するほど本を買ったりしています。\nしかし、長年の悩みとして本で読んだことをすぐに忘れてしまうということがありました。様々な本を読んでも同じ悩みを持っている人は多いように思います。そこでは覚える方法として、2度読むとかメモを取るといった手法が提案されてたりしました。しかし、どの手法も僕にはしっくり来ませんでした。\nそこで自分にしっくり来るようなアプリを作ってしまおうと思い立ち、作ることにしました。\n\n### 作る上で参考にしたものや考えたこと\n\n今回作る上で最も参考になったのが「[Learn better](https://www.amazon.co.jp/dp/B07F8KZ8SJ/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)」という本です。\nこの本はどうすれば学びを深めることが出来るのかということに焦点を当てて、科学的に書いた本です。\nその中で僕が気になったのが検索練習という方法です。\n検索練習とは、学んだことに対して自分に問いかけてそれを思い出すという練習方法です。\n\n検索練習が気になった理由としては以下の実験があります。\nその実験では文章を覚えるのに、4回同じ文章を読んだグループと1回だけ文章を読んでその後3回思い出すというグループでどちらのほうが覚えているかについて数日後にテストを行いました。\nその結果思い出す試みをしたグループの方がはるかに文章を覚えていました。\nつまり、2度読みするより1度読んで何回か思い出すためのテストを行ったほうがよいという結果でした。\n\nまた、僕も受験勉強のときは、参考書を読むよりも実際に問題を解いた方が理解が深まりやすいという実感を持っていたのも気になった理由に入ると思います。\n\nここで、それに特化したアプリがありそうだなと思って調べたところ[ANKI](https://apps.ankiweb.net/)というアプリが見つかりました。\nこのアプリは忘却曲線に沿って、最適なタイミングで問題を出してくれるというアプリです。\n僕もまあアプリをがむしゃらに作るよりは既存のものを使った方が効率的なので、ANKIを試したみました。\nしかし、僕はこのアプリは全然長続きしませんでした。\n毎日ANKIを開くというたった1ステップが続かなかったのです。\nこの毎日復習をするという習慣をどうにかして作る必要があります。\n\nそこで、僕は自分が**毎日行っている習慣に復習を組み込む**といいんじゃないか？という結論に至りました。\nこれは科学的にも証明されており、新しい習慣を作るときに既存のものに組み込むという手法はよく使われています。\n(参考文献はまた探しておきます。)\nそれで僕は毎日行っているLINEを開くという習慣に復習を行うという行動を組み込むことにしました。\nLINEなら毎日必ず確認するし、僕はLINEに未読のものがあるのが許せないたちなので、とりあえず問題を開くというところまでは習慣になるだろうと思いました。\n\n(ちなみに、習慣について深く知りたいという人には「[小さな習慣](https://www.amazon.co.jp/%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%83%BB%E3%82%AC%E3%82%A4%E3%82%BA/dp/4478065772/ref=sr_1_1?adgrpid=54029394860&gclid=CjwKCAiAwZTuBRAYEiwAcr67OXKoUc1RINrkE9D0Yq1ZPfAnIsZYDEKjdPZgKcKYrgci2J-oXPW-AhoCSsUQAvD_BwE&hvadid=259564547220&hvdev=c&hvlocphy=1009507&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=4242536134617577817&hvtargid=aud-759377471933%3Akwd-349758188854&hydadcr=17958_10174825&jp-ad-ap=0&keywords=%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3&qid=1573282015&sr=8-1)」という本がおすすめです)\n\n### 作ったもの\n\n作る工程はとりあえずさておき、下の画像が完成したものです。\nLINEではAPIが公開されており、自分の好きなアカウントを作成することができます。\nアイコンや背景もカスタマイズ出来ると思うんですが、めんどくさくてやってません。\n「ガリ勉くん」という名前も適当につけました。\n\n<img src=\"/css/images/go-learner/go-learner-example.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n僕は毎日以下のような手順で問題を解いています。\n\n1. 毎朝問題がある決まりに従って出題されます。(今の所毎日5問ずつ)\n1. 出題された問題に対して、自分なりの答えを考えます。\n1. 「答えを見る」ボタンを押します。\n1. 答えと一緒に「正解・不正解」ボタンがきます\n1. もし、自分の答えがあっていたら正解ボタン・間違っていたら不正解ボタンを押します\n1. これを全問題に対して行います。\n\nこうすることで、毎日ランダムに問題について思い出すことができます。\n問題は以下のようにGoogleスプレッドシートに書いたものがランダムに出される用になっています。\n\n<img src=\"/css/images/go-learner/spread-sheet.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\nこれで本を読んだときに、「これは覚えときたいなー」と思った内容をスプレッドシートに問題形式に書いておけば、毎日問題が届けられるわけです。\n\n### 終わりに\n\n今回は自分がどのようなものを作ったかについて書きました。\n現在のところ、毎日続けて問題を解いているしかなり覚えてきたなーと思うようになってきました。\nまた、スプレッドシートにまとめることで見返したときに自分結構頑張ってるなという感じがして嬉しいです。\n\nしかし、問題を出す決まり(アルゴリズム)はめちゃくちゃ適当に書いてます。\nまた、不正解ボタンを押したときに何の反応もありません。\n不正解だったときに、もっと自分が悔しくなるような工夫を設ければもっと記憶定着率は上がる気がします。\n\n今回は一応形になりつつ、復習にもなっているのでブログにしたためてみましたが、これからもっと改良していきます。\nまた、プログラミング的な内容については後日ブログで書こうかなと思っています。\n\nもし、どういうふうにやっているか気になる人がいれば以下のリポジトリを参考に見てください。\nhttps://github.com/kitagry/go-learner\n","source":"_posts/go-learner-background.md","raw":"---\ntitle: 読書内容を覚えるためのライフハック作った\ndate: 2019-11-09 14:49:03\ntags:\n- 読書\n- ライフハック\n---\n\n僕はライフハックが結構好きで、自分でも色々考えてはあれやこれやと試したりしてます。\n今回はその中でプログラミングを用いたライフハックが今の所結構いい感じなのでブログにしたためようと思います。\n\n### 作ったものの背景\n\n僕はかなり読書が好きで、しばしば自分の貯金を圧迫するほど本を買ったりしています。\nしかし、長年の悩みとして本で読んだことをすぐに忘れてしまうということがありました。様々な本を読んでも同じ悩みを持っている人は多いように思います。そこでは覚える方法として、2度読むとかメモを取るといった手法が提案されてたりしました。しかし、どの手法も僕にはしっくり来ませんでした。\nそこで自分にしっくり来るようなアプリを作ってしまおうと思い立ち、作ることにしました。\n\n### 作る上で参考にしたものや考えたこと\n\n今回作る上で最も参考になったのが「[Learn better](https://www.amazon.co.jp/dp/B07F8KZ8SJ/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)」という本です。\nこの本はどうすれば学びを深めることが出来るのかということに焦点を当てて、科学的に書いた本です。\nその中で僕が気になったのが検索練習という方法です。\n検索練習とは、学んだことに対して自分に問いかけてそれを思い出すという練習方法です。\n\n検索練習が気になった理由としては以下の実験があります。\nその実験では文章を覚えるのに、4回同じ文章を読んだグループと1回だけ文章を読んでその後3回思い出すというグループでどちらのほうが覚えているかについて数日後にテストを行いました。\nその結果思い出す試みをしたグループの方がはるかに文章を覚えていました。\nつまり、2度読みするより1度読んで何回か思い出すためのテストを行ったほうがよいという結果でした。\n\nまた、僕も受験勉強のときは、参考書を読むよりも実際に問題を解いた方が理解が深まりやすいという実感を持っていたのも気になった理由に入ると思います。\n\nここで、それに特化したアプリがありそうだなと思って調べたところ[ANKI](https://apps.ankiweb.net/)というアプリが見つかりました。\nこのアプリは忘却曲線に沿って、最適なタイミングで問題を出してくれるというアプリです。\n僕もまあアプリをがむしゃらに作るよりは既存のものを使った方が効率的なので、ANKIを試したみました。\nしかし、僕はこのアプリは全然長続きしませんでした。\n毎日ANKIを開くというたった1ステップが続かなかったのです。\nこの毎日復習をするという習慣をどうにかして作る必要があります。\n\nそこで、僕は自分が**毎日行っている習慣に復習を組み込む**といいんじゃないか？という結論に至りました。\nこれは科学的にも証明されており、新しい習慣を作るときに既存のものに組み込むという手法はよく使われています。\n(参考文献はまた探しておきます。)\nそれで僕は毎日行っているLINEを開くという習慣に復習を行うという行動を組み込むことにしました。\nLINEなら毎日必ず確認するし、僕はLINEに未読のものがあるのが許せないたちなので、とりあえず問題を開くというところまでは習慣になるだろうと思いました。\n\n(ちなみに、習慣について深く知りたいという人には「[小さな習慣](https://www.amazon.co.jp/%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%83%BB%E3%82%AC%E3%82%A4%E3%82%BA/dp/4478065772/ref=sr_1_1?adgrpid=54029394860&gclid=CjwKCAiAwZTuBRAYEiwAcr67OXKoUc1RINrkE9D0Yq1ZPfAnIsZYDEKjdPZgKcKYrgci2J-oXPW-AhoCSsUQAvD_BwE&hvadid=259564547220&hvdev=c&hvlocphy=1009507&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=4242536134617577817&hvtargid=aud-759377471933%3Akwd-349758188854&hydadcr=17958_10174825&jp-ad-ap=0&keywords=%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3&qid=1573282015&sr=8-1)」という本がおすすめです)\n\n### 作ったもの\n\n作る工程はとりあえずさておき、下の画像が完成したものです。\nLINEではAPIが公開されており、自分の好きなアカウントを作成することができます。\nアイコンや背景もカスタマイズ出来ると思うんですが、めんどくさくてやってません。\n「ガリ勉くん」という名前も適当につけました。\n\n<img src=\"/css/images/go-learner/go-learner-example.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n僕は毎日以下のような手順で問題を解いています。\n\n1. 毎朝問題がある決まりに従って出題されます。(今の所毎日5問ずつ)\n1. 出題された問題に対して、自分なりの答えを考えます。\n1. 「答えを見る」ボタンを押します。\n1. 答えと一緒に「正解・不正解」ボタンがきます\n1. もし、自分の答えがあっていたら正解ボタン・間違っていたら不正解ボタンを押します\n1. これを全問題に対して行います。\n\nこうすることで、毎日ランダムに問題について思い出すことができます。\n問題は以下のようにGoogleスプレッドシートに書いたものがランダムに出される用になっています。\n\n<img src=\"/css/images/go-learner/spread-sheet.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\nこれで本を読んだときに、「これは覚えときたいなー」と思った内容をスプレッドシートに問題形式に書いておけば、毎日問題が届けられるわけです。\n\n### 終わりに\n\n今回は自分がどのようなものを作ったかについて書きました。\n現在のところ、毎日続けて問題を解いているしかなり覚えてきたなーと思うようになってきました。\nまた、スプレッドシートにまとめることで見返したときに自分結構頑張ってるなという感じがして嬉しいです。\n\nしかし、問題を出す決まり(アルゴリズム)はめちゃくちゃ適当に書いてます。\nまた、不正解ボタンを押したときに何の反応もありません。\n不正解だったときに、もっと自分が悔しくなるような工夫を設ければもっと記憶定着率は上がる気がします。\n\n今回は一応形になりつつ、復習にもなっているのでブログにしたためてみましたが、これからもっと改良していきます。\nまた、プログラミング的な内容については後日ブログで書こうかなと思っています。\n\nもし、どういうふうにやっているか気になる人がいれば以下のリポジトリを参考に見てください。\nhttps://github.com/kitagry/go-learner\n","slug":"go-learner-background","published":1,"updated":"2019-11-10T09:18:30.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3oj34160000zqpgenpk4sf6","content":"<p>僕はライフハックが結構好きで、自分でも色々考えてはあれやこれやと試したりしてます。<br>今回はその中でプログラミングを用いたライフハックが今の所結構いい感じなのでブログにしたためようと思います。</p>\n<h3 id=\"作ったものの背景\"><a href=\"#作ったものの背景\" class=\"headerlink\" title=\"作ったものの背景\"></a>作ったものの背景</h3><p>僕はかなり読書が好きで、しばしば自分の貯金を圧迫するほど本を買ったりしています。<br>しかし、長年の悩みとして本で読んだことをすぐに忘れてしまうということがありました。様々な本を読んでも同じ悩みを持っている人は多いように思います。そこでは覚える方法として、2度読むとかメモを取るといった手法が提案されてたりしました。しかし、どの手法も僕にはしっくり来ませんでした。<br>そこで自分にしっくり来るようなアプリを作ってしまおうと思い立ち、作ることにしました。</p>\n<h3 id=\"作る上で参考にしたものや考えたこと\"><a href=\"#作る上で参考にしたものや考えたこと\" class=\"headerlink\" title=\"作る上で参考にしたものや考えたこと\"></a>作る上で参考にしたものや考えたこと</h3><p>今回作る上で最も参考になったのが「<a href=\"https://www.amazon.co.jp/dp/B07F8KZ8SJ/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">Learn better</a>」という本です。<br>この本はどうすれば学びを深めることが出来るのかということに焦点を当てて、科学的に書いた本です。<br>その中で僕が気になったのが検索練習という方法です。<br>検索練習とは、学んだことに対して自分に問いかけてそれを思い出すという練習方法です。</p>\n<p>検索練習が気になった理由としては以下の実験があります。<br>その実験では文章を覚えるのに、4回同じ文章を読んだグループと1回だけ文章を読んでその後3回思い出すというグループでどちらのほうが覚えているかについて数日後にテストを行いました。<br>その結果思い出す試みをしたグループの方がはるかに文章を覚えていました。<br>つまり、2度読みするより1度読んで何回か思い出すためのテストを行ったほうがよいという結果でした。</p>\n<p>また、僕も受験勉強のときは、参考書を読むよりも実際に問題を解いた方が理解が深まりやすいという実感を持っていたのも気になった理由に入ると思います。</p>\n<p>ここで、それに特化したアプリがありそうだなと思って調べたところ<a href=\"https://apps.ankiweb.net/\" target=\"_blank\" rel=\"noopener\">ANKI</a>というアプリが見つかりました。<br>このアプリは忘却曲線に沿って、最適なタイミングで問題を出してくれるというアプリです。<br>僕もまあアプリをがむしゃらに作るよりは既存のものを使った方が効率的なので、ANKIを試したみました。<br>しかし、僕はこのアプリは全然長続きしませんでした。<br>毎日ANKIを開くというたった1ステップが続かなかったのです。<br>この毎日復習をするという習慣をどうにかして作る必要があります。</p>\n<p>そこで、僕は自分が<strong>毎日行っている習慣に復習を組み込む</strong>といいんじゃないか？という結論に至りました。<br>これは科学的にも証明されており、新しい習慣を作るときに既存のものに組み込むという手法はよく使われています。<br>(参考文献はまた探しておきます。)<br>それで僕は毎日行っているLINEを開くという習慣に復習を行うという行動を組み込むことにしました。<br>LINEなら毎日必ず確認するし、僕はLINEに未読のものがあるのが許せないたちなので、とりあえず問題を開くというところまでは習慣になるだろうと思いました。</p>\n<p>(ちなみに、習慣について深く知りたいという人には「<a href=\"https://www.amazon.co.jp/%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%83%BB%E3%82%AC%E3%82%A4%E3%82%BA/dp/4478065772/ref=sr_1_1?adgrpid=54029394860&gclid=CjwKCAiAwZTuBRAYEiwAcr67OXKoUc1RINrkE9D0Yq1ZPfAnIsZYDEKjdPZgKcKYrgci2J-oXPW-AhoCSsUQAvD_BwE&hvadid=259564547220&hvdev=c&hvlocphy=1009507&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=4242536134617577817&hvtargid=aud-759377471933%3Akwd-349758188854&hydadcr=17958_10174825&jp-ad-ap=0&keywords=%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3&qid=1573282015&sr=8-1\" target=\"_blank\" rel=\"noopener\">小さな習慣</a>」という本がおすすめです)</p>\n<h3 id=\"作ったもの\"><a href=\"#作ったもの\" class=\"headerlink\" title=\"作ったもの\"></a>作ったもの</h3><p>作る工程はとりあえずさておき、下の画像が完成したものです。<br>LINEではAPIが公開されており、自分の好きなアカウントを作成することができます。<br>アイコンや背景もカスタマイズ出来ると思うんですが、めんどくさくてやってません。<br>「ガリ勉くん」という名前も適当につけました。</p>\n<img src=\"/css/images/go-learner/go-learner-example.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n<p>僕は毎日以下のような手順で問題を解いています。</p>\n<ol>\n<li>毎朝問題がある決まりに従って出題されます。(今の所毎日5問ずつ)</li>\n<li>出題された問題に対して、自分なりの答えを考えます。</li>\n<li>「答えを見る」ボタンを押します。</li>\n<li>答えと一緒に「正解・不正解」ボタンがきます</li>\n<li>もし、自分の答えがあっていたら正解ボタン・間違っていたら不正解ボタンを押します</li>\n<li>これを全問題に対して行います。</li>\n</ol>\n<p>こうすることで、毎日ランダムに問題について思い出すことができます。<br>問題は以下のようにGoogleスプレッドシートに書いたものがランダムに出される用になっています。</p>\n<img src=\"/css/images/go-learner/spread-sheet.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n<p>これで本を読んだときに、「これは覚えときたいなー」と思った内容をスプレッドシートに問題形式に書いておけば、毎日問題が届けられるわけです。</p>\n<h3 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h3><p>今回は自分がどのようなものを作ったかについて書きました。<br>現在のところ、毎日続けて問題を解いているしかなり覚えてきたなーと思うようになってきました。<br>また、スプレッドシートにまとめることで見返したときに自分結構頑張ってるなという感じがして嬉しいです。</p>\n<p>しかし、問題を出す決まり(アルゴリズム)はめちゃくちゃ適当に書いてます。<br>また、不正解ボタンを押したときに何の反応もありません。<br>不正解だったときに、もっと自分が悔しくなるような工夫を設ければもっと記憶定着率は上がる気がします。</p>\n<p>今回は一応形になりつつ、復習にもなっているのでブログにしたためてみましたが、これからもっと改良していきます。<br>また、プログラミング的な内容については後日ブログで書こうかなと思っています。</p>\n<p>もし、どういうふうにやっているか気になる人がいれば以下のリポジトリを参考に見てください。<br><a href=\"https://github.com/kitagry/go-learner\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry/go-learner</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>僕はライフハックが結構好きで、自分でも色々考えてはあれやこれやと試したりしてます。<br>今回はその中でプログラミングを用いたライフハックが今の所結構いい感じなのでブログにしたためようと思います。</p>\n<h3 id=\"作ったものの背景\"><a href=\"#作ったものの背景\" class=\"headerlink\" title=\"作ったものの背景\"></a>作ったものの背景</h3><p>僕はかなり読書が好きで、しばしば自分の貯金を圧迫するほど本を買ったりしています。<br>しかし、長年の悩みとして本で読んだことをすぐに忘れてしまうということがありました。様々な本を読んでも同じ悩みを持っている人は多いように思います。そこでは覚える方法として、2度読むとかメモを取るといった手法が提案されてたりしました。しかし、どの手法も僕にはしっくり来ませんでした。<br>そこで自分にしっくり来るようなアプリを作ってしまおうと思い立ち、作ることにしました。</p>\n<h3 id=\"作る上で参考にしたものや考えたこと\"><a href=\"#作る上で参考にしたものや考えたこと\" class=\"headerlink\" title=\"作る上で参考にしたものや考えたこと\"></a>作る上で参考にしたものや考えたこと</h3><p>今回作る上で最も参考になったのが「<a href=\"https://www.amazon.co.jp/dp/B07F8KZ8SJ/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">Learn better</a>」という本です。<br>この本はどうすれば学びを深めることが出来るのかということに焦点を当てて、科学的に書いた本です。<br>その中で僕が気になったのが検索練習という方法です。<br>検索練習とは、学んだことに対して自分に問いかけてそれを思い出すという練習方法です。</p>\n<p>検索練習が気になった理由としては以下の実験があります。<br>その実験では文章を覚えるのに、4回同じ文章を読んだグループと1回だけ文章を読んでその後3回思い出すというグループでどちらのほうが覚えているかについて数日後にテストを行いました。<br>その結果思い出す試みをしたグループの方がはるかに文章を覚えていました。<br>つまり、2度読みするより1度読んで何回か思い出すためのテストを行ったほうがよいという結果でした。</p>\n<p>また、僕も受験勉強のときは、参考書を読むよりも実際に問題を解いた方が理解が深まりやすいという実感を持っていたのも気になった理由に入ると思います。</p>\n<p>ここで、それに特化したアプリがありそうだなと思って調べたところ<a href=\"https://apps.ankiweb.net/\" target=\"_blank\" rel=\"noopener\">ANKI</a>というアプリが見つかりました。<br>このアプリは忘却曲線に沿って、最適なタイミングで問題を出してくれるというアプリです。<br>僕もまあアプリをがむしゃらに作るよりは既存のものを使った方が効率的なので、ANKIを試したみました。<br>しかし、僕はこのアプリは全然長続きしませんでした。<br>毎日ANKIを開くというたった1ステップが続かなかったのです。<br>この毎日復習をするという習慣をどうにかして作る必要があります。</p>\n<p>そこで、僕は自分が<strong>毎日行っている習慣に復習を組み込む</strong>といいんじゃないか？という結論に至りました。<br>これは科学的にも証明されており、新しい習慣を作るときに既存のものに組み込むという手法はよく使われています。<br>(参考文献はまた探しておきます。)<br>それで僕は毎日行っているLINEを開くという習慣に復習を行うという行動を組み込むことにしました。<br>LINEなら毎日必ず確認するし、僕はLINEに未読のものがあるのが許せないたちなので、とりあえず問題を開くというところまでは習慣になるだろうと思いました。</p>\n<p>(ちなみに、習慣について深く知りたいという人には「<a href=\"https://www.amazon.co.jp/%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%B4%E3%83%B3%E3%83%BB%E3%82%AC%E3%82%A4%E3%82%BA/dp/4478065772/ref=sr_1_1?adgrpid=54029394860&gclid=CjwKCAiAwZTuBRAYEiwAcr67OXKoUc1RINrkE9D0Yq1ZPfAnIsZYDEKjdPZgKcKYrgci2J-oXPW-AhoCSsUQAvD_BwE&hvadid=259564547220&hvdev=c&hvlocphy=1009507&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=4242536134617577817&hvtargid=aud-759377471933%3Akwd-349758188854&hydadcr=17958_10174825&jp-ad-ap=0&keywords=%E5%B0%8F%E3%81%95%E3%81%AA%E7%BF%92%E6%85%A3&qid=1573282015&sr=8-1\" target=\"_blank\" rel=\"noopener\">小さな習慣</a>」という本がおすすめです)</p>\n<h3 id=\"作ったもの\"><a href=\"#作ったもの\" class=\"headerlink\" title=\"作ったもの\"></a>作ったもの</h3><p>作る工程はとりあえずさておき、下の画像が完成したものです。<br>LINEではAPIが公開されており、自分の好きなアカウントを作成することができます。<br>アイコンや背景もカスタマイズ出来ると思うんですが、めんどくさくてやってません。<br>「ガリ勉くん」という名前も適当につけました。</p>\n<img src=\"/css/images/go-learner/go-learner-example.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n<p>僕は毎日以下のような手順で問題を解いています。</p>\n<ol>\n<li>毎朝問題がある決まりに従って出題されます。(今の所毎日5問ずつ)</li>\n<li>出題された問題に対して、自分なりの答えを考えます。</li>\n<li>「答えを見る」ボタンを押します。</li>\n<li>答えと一緒に「正解・不正解」ボタンがきます</li>\n<li>もし、自分の答えがあっていたら正解ボタン・間違っていたら不正解ボタンを押します</li>\n<li>これを全問題に対して行います。</li>\n</ol>\n<p>こうすることで、毎日ランダムに問題について思い出すことができます。<br>問題は以下のようにGoogleスプレッドシートに書いたものがランダムに出される用になっています。</p>\n<img src=\"/css/images/go-learner/spread-sheet.png\" alt=\"\" align=\"left\" style=\"max-height: 300px;\">\n<br style=\"clear:left;\">\n\n<p>これで本を読んだときに、「これは覚えときたいなー」と思った内容をスプレッドシートに問題形式に書いておけば、毎日問題が届けられるわけです。</p>\n<h3 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h3><p>今回は自分がどのようなものを作ったかについて書きました。<br>現在のところ、毎日続けて問題を解いているしかなり覚えてきたなーと思うようになってきました。<br>また、スプレッドシートにまとめることで見返したときに自分結構頑張ってるなという感じがして嬉しいです。</p>\n<p>しかし、問題を出す決まり(アルゴリズム)はめちゃくちゃ適当に書いてます。<br>また、不正解ボタンを押したときに何の反応もありません。<br>不正解だったときに、もっと自分が悔しくなるような工夫を設ければもっと記憶定着率は上がる気がします。</p>\n<p>今回は一応形になりつつ、復習にもなっているのでブログにしたためてみましたが、これからもっと改良していきます。<br>また、プログラミング的な内容については後日ブログで書こうかなと思っています。</p>\n<p>もし、どういうふうにやっているか気になる人がいれば以下のリポジトリを参考に見てください。<br><a href=\"https://github.com/kitagry/go-learner\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry/go-learner</a></p>\n"},{"title":"2019/11 読んだ本まとめ","date":"2019-12-02T13:28:57.000Z","_content":"\n読んだ本について振り返る\n\n## [なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術](https://www.amazon.co.jp/%E3%81%AA%E3%81%9C%E7%A7%91%E5%AD%A6%E3%81%AF%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AA%E3%83%BC%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B%E2%94%80%E2%94%80%E3%83%8F%E3%83%AA%E3%82%A6%E3%83%83%E3%83%89%E3%81%AB%E5%AD%A6%E3%82%93%E3%81%A0%E4%BC%9D%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E3%83%BB%E3%82%AA%E3%83%AB%E3%82%BD%E3%83%B3/dp/4766425235)\n\n博士課程を修了したにも関わらずハリウッドで映画監督になろうとしている著者が、科学者がハリウッドに習うべきことを記した本。\n論文やこのサイトの記事などを書くときに参考になりそうな内容が詰まっていた。\n\n基本的にはABT(And, But, Therefore)を繰り返すときに読者にわかりやすい文書が書けるようになるという内容だった。\n内容は一つのことを繰り返している印象だったけど、その一つのことが結構説得力がある内容だった気がした。\n最近は文書を書くときに気にかけている。\n\n硬めの文章を書きつつ、説得感をもたせたい人におすすめ\n自分は文章を書いているうちに何を書いてるかを忘れちゃうので、この本は結構参考になった。\n\n## [スタンフォード式 人生デザイン講座](https://www.amazon.co.jp/dp/B07YG1GWWT/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\nスタンフォードで教えられているライフデザインの講義の内容をまとめたもの。\n内容についてはなるほどなーと思わされるものが結構あった。\nしかし、読んでから1ヶ月くらい経ったけど講義の内容があんまり出来ていない。\nなので、もう一回読み直しながら講義の内容をやろうと思っている。\n\n結構人生をどう行きていこうという人にはおすすめ。\n\n## [「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ](https://www.amazon.co.jp/dp/B07VC4N5HW/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\n\n任天堂出身の著者がなぜゲームがこれほどの没頭感を生み出しているのかについて仕組みを解説した本。\n僕は基本的には参考文献とかがしっかりしていない本はあんまり読まないけど、友達が面白かったと言っていたので読んでみた。\n\nマリオの例などは面白くて、マリオの操作方法は誰も教えてくれないのに誰でも操作方法が分かるという設計になっていた。という説明は目から鱗の話であった。\nストーリーとかのデザインをする人は結構読んでおくと面白いかもなーと思った。\n\n\n## [SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる](https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1)\n\nマルチタスクではなく、シングルタスクに専念することによって効率的に仕事を終わらせられるという本。\nマルチタスクが良いと思っている人にはぜひとも読んでほしいなという本。\n自分は結構知っている内容があったので、再確認という感じ。\n\nシングルタスクは良いとわかっているが、なんやかんやで他のことをやりながら作業してしまうという事があるのでたまに読んで意識しておきたいなあと思った。\n内容は是非読んでくださいな。\n\n## [実践Rust入門 ［言語仕様から開発手法まで］](https://gihyo.jp/book/2019/978-4-297-10559-4)\n\nプログラミング言語であるRustの入門書。\nRustは[公式ドキュメント](https://doc.rust-jp.rs/)がしっかりしているので正直買わなくてもなんとかなるかなと思ってずっと買わずにいた。\nしかし、この本を読んで今まで買わずにいたことを後悔するくらい良い本だった。\nこの本を読んだことがないRust入門者はぜひとも読んでほしい。\n\n最初の方も結構良かったけど、7~10章あたりがすごく参考になった。\n今でもRustでプログラミングをするときは結構参考にしている。\nプログラミングをしているときによく読み返したくなるので、Kindleで買ったのは正解だったなと思った。\n\n11章のActixの例は、新しいバージョンが全然違ってなかなか進めづらかった。\n現在はRustいAsync・Awaitが追加されているらしいので、そこら辺は自分で調べながらやる必要があると思う。\n\n## [テスト駆動開発](https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\n\n有名なTDDの説明をしている名著。\nテスト駆動を例を示しながら進めている。\n著者がテスト駆動開発で開発を行いながら書いているので著者がどういう思考で進めながら開発をしているのかというのが進めながら分かる。\nまた、後半ではテスト駆動開発に有用なデザインパターンやTDDの歴史などが書いてあり結構面白かった。\n一度目は特に写経などはせずに読み進めたが、読み終えたときに写経すればよかったなあと思って2周目に突入中。\n\nTDDのことを誤解していたなあと思って、テスト駆動開発素晴らしいという気持ちがすごい。\n今後はTDDを取り入れて開発を行いたいと思った。\n\n\n## 最後に\n\n以上11月はこんな感じで本を読みました。\n自分は本にハマる時期とプログラミングにハマる時期が交互に来るらしく、前半は普通に読書を後半はプログラミング関係の本を読むという生活でした。\nあと、論文も5本くらい読んだ気がする。\n12月に入ってからは本ではなく[Goなら分かるシステムプログラミング](https://ascii.jp/elem/000/001/235/1235262/)にハマっていてしばらくはこれをやるかなあという感じ。\n現在は2冊くらい本が溜まっている状態なので来年に持ち越さずに読み切りたいなあと思っています。\n\nとりあえずおすすめとしては\n\n非プログラミング系なら[SINGLE TASK](https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1)、プログラミング系なら[テスト駆動開発](https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)という感じです。\n","source":"_posts/read-book-2019-11.md","raw":"---\ntitle: 2019/11 読んだ本まとめ\ndate: 2019-12-02 22:28:57\ntags:\n- 読書\n---\n\n読んだ本について振り返る\n\n## [なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術](https://www.amazon.co.jp/%E3%81%AA%E3%81%9C%E7%A7%91%E5%AD%A6%E3%81%AF%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AA%E3%83%BC%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B%E2%94%80%E2%94%80%E3%83%8F%E3%83%AA%E3%82%A6%E3%83%83%E3%83%89%E3%81%AB%E5%AD%A6%E3%82%93%E3%81%A0%E4%BC%9D%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E3%83%BB%E3%82%AA%E3%83%AB%E3%82%BD%E3%83%B3/dp/4766425235)\n\n博士課程を修了したにも関わらずハリウッドで映画監督になろうとしている著者が、科学者がハリウッドに習うべきことを記した本。\n論文やこのサイトの記事などを書くときに参考になりそうな内容が詰まっていた。\n\n基本的にはABT(And, But, Therefore)を繰り返すときに読者にわかりやすい文書が書けるようになるという内容だった。\n内容は一つのことを繰り返している印象だったけど、その一つのことが結構説得力がある内容だった気がした。\n最近は文書を書くときに気にかけている。\n\n硬めの文章を書きつつ、説得感をもたせたい人におすすめ\n自分は文章を書いているうちに何を書いてるかを忘れちゃうので、この本は結構参考になった。\n\n## [スタンフォード式 人生デザイン講座](https://www.amazon.co.jp/dp/B07YG1GWWT/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\nスタンフォードで教えられているライフデザインの講義の内容をまとめたもの。\n内容についてはなるほどなーと思わされるものが結構あった。\nしかし、読んでから1ヶ月くらい経ったけど講義の内容があんまり出来ていない。\nなので、もう一回読み直しながら講義の内容をやろうと思っている。\n\n結構人生をどう行きていこうという人にはおすすめ。\n\n## [「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ](https://www.amazon.co.jp/dp/B07VC4N5HW/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\n\n任天堂出身の著者がなぜゲームがこれほどの没頭感を生み出しているのかについて仕組みを解説した本。\n僕は基本的には参考文献とかがしっかりしていない本はあんまり読まないけど、友達が面白かったと言っていたので読んでみた。\n\nマリオの例などは面白くて、マリオの操作方法は誰も教えてくれないのに誰でも操作方法が分かるという設計になっていた。という説明は目から鱗の話であった。\nストーリーとかのデザインをする人は結構読んでおくと面白いかもなーと思った。\n\n\n## [SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる](https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1)\n\nマルチタスクではなく、シングルタスクに専念することによって効率的に仕事を終わらせられるという本。\nマルチタスクが良いと思っている人にはぜひとも読んでほしいなという本。\n自分は結構知っている内容があったので、再確認という感じ。\n\nシングルタスクは良いとわかっているが、なんやかんやで他のことをやりながら作業してしまうという事があるのでたまに読んで意識しておきたいなあと思った。\n内容は是非読んでくださいな。\n\n## [実践Rust入門 ［言語仕様から開発手法まで］](https://gihyo.jp/book/2019/978-4-297-10559-4)\n\nプログラミング言語であるRustの入門書。\nRustは[公式ドキュメント](https://doc.rust-jp.rs/)がしっかりしているので正直買わなくてもなんとかなるかなと思ってずっと買わずにいた。\nしかし、この本を読んで今まで買わずにいたことを後悔するくらい良い本だった。\nこの本を読んだことがないRust入門者はぜひとも読んでほしい。\n\n最初の方も結構良かったけど、7~10章あたりがすごく参考になった。\n今でもRustでプログラミングをするときは結構参考にしている。\nプログラミングをしているときによく読み返したくなるので、Kindleで買ったのは正解だったなと思った。\n\n11章のActixの例は、新しいバージョンが全然違ってなかなか進めづらかった。\n現在はRustいAsync・Awaitが追加されているらしいので、そこら辺は自分で調べながらやる必要があると思う。\n\n## [テスト駆動開発](https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)\n\n有名なTDDの説明をしている名著。\nテスト駆動を例を示しながら進めている。\n著者がテスト駆動開発で開発を行いながら書いているので著者がどういう思考で進めながら開発をしているのかというのが進めながら分かる。\nまた、後半ではテスト駆動開発に有用なデザインパターンやTDDの歴史などが書いてあり結構面白かった。\n一度目は特に写経などはせずに読み進めたが、読み終えたときに写経すればよかったなあと思って2周目に突入中。\n\nTDDのことを誤解していたなあと思って、テスト駆動開発素晴らしいという気持ちがすごい。\n今後はTDDを取り入れて開発を行いたいと思った。\n\n\n## 最後に\n\n以上11月はこんな感じで本を読みました。\n自分は本にハマる時期とプログラミングにハマる時期が交互に来るらしく、前半は普通に読書を後半はプログラミング関係の本を読むという生活でした。\nあと、論文も5本くらい読んだ気がする。\n12月に入ってからは本ではなく[Goなら分かるシステムプログラミング](https://ascii.jp/elem/000/001/235/1235262/)にハマっていてしばらくはこれをやるかなあという感じ。\n現在は2冊くらい本が溜まっている状態なので来年に持ち越さずに読み切りたいなあと思っています。\n\nとりあえずおすすめとしては\n\n非プログラミング系なら[SINGLE TASK](https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1)、プログラミング系なら[テスト駆動開発](https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)という感じです。\n","slug":"read-book-2019-11","published":1,"updated":"2019-12-02T14:27:49.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3oj341b0001zqpgcwy5e5hr","content":"<p>読んだ本について振り返る</p>\n<h2 id=\"なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\"><a href=\"#なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\" class=\"headerlink\" title=\"なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\"></a><a href=\"https://www.amazon.co.jp/%E3%81%AA%E3%81%9C%E7%A7%91%E5%AD%A6%E3%81%AF%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AA%E3%83%BC%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B%E2%94%80%E2%94%80%E3%83%8F%E3%83%AA%E3%82%A6%E3%83%83%E3%83%89%E3%81%AB%E5%AD%A6%E3%82%93%E3%81%A0%E4%BC%9D%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E3%83%BB%E3%82%AA%E3%83%AB%E3%82%BD%E3%83%B3/dp/4766425235\" target=\"_blank\" rel=\"noopener\">なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術</a></h2><p>博士課程を修了したにも関わらずハリウッドで映画監督になろうとしている著者が、科学者がハリウッドに習うべきことを記した本。<br>論文やこのサイトの記事などを書くときに参考になりそうな内容が詰まっていた。</p>\n<p>基本的にはABT(And, But, Therefore)を繰り返すときに読者にわかりやすい文書が書けるようになるという内容だった。<br>内容は一つのことを繰り返している印象だったけど、その一つのことが結構説得力がある内容だった気がした。<br>最近は文書を書くときに気にかけている。</p>\n<p>硬めの文章を書きつつ、説得感をもたせたい人におすすめ<br>自分は文章を書いているうちに何を書いてるかを忘れちゃうので、この本は結構参考になった。</p>\n<h2 id=\"スタンフォード式-人生デザイン講座\"><a href=\"#スタンフォード式-人生デザイン講座\" class=\"headerlink\" title=\"スタンフォード式 人生デザイン講座\"></a><a href=\"https://www.amazon.co.jp/dp/B07YG1GWWT/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">スタンフォード式 人生デザイン講座</a></h2><p>スタンフォードで教えられているライフデザインの講義の内容をまとめたもの。<br>内容についてはなるほどなーと思わされるものが結構あった。<br>しかし、読んでから1ヶ月くらい経ったけど講義の内容があんまり出来ていない。<br>なので、もう一回読み直しながら講義の内容をやろうと思っている。</p>\n<p>結構人生をどう行きていこうという人にはおすすめ。</p>\n<h2 id=\"「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\"><a href=\"#「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\" class=\"headerlink\" title=\"「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\"></a><a href=\"https://www.amazon.co.jp/dp/B07VC4N5HW/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ</a></h2><p>任天堂出身の著者がなぜゲームがこれほどの没頭感を生み出しているのかについて仕組みを解説した本。<br>僕は基本的には参考文献とかがしっかりしていない本はあんまり読まないけど、友達が面白かったと言っていたので読んでみた。</p>\n<p>マリオの例などは面白くて、マリオの操作方法は誰も教えてくれないのに誰でも操作方法が分かるという設計になっていた。という説明は目から鱗の話であった。<br>ストーリーとかのデザインをする人は結構読んでおくと面白いかもなーと思った。</p>\n<h2 id=\"SINGLE-TASK-一点集中術――「シングルタスクの原則」ですべての成果が最大になる\"><a href=\"#SINGLE-TASK-一点集中術――「シングルタスクの原則」ですべての成果が最大になる\" class=\"headerlink\" title=\"SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる\"></a><a href=\"https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1\" target=\"_blank\" rel=\"noopener\">SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる</a></h2><p>マルチタスクではなく、シングルタスクに専念することによって効率的に仕事を終わらせられるという本。<br>マルチタスクが良いと思っている人にはぜひとも読んでほしいなという本。<br>自分は結構知っている内容があったので、再確認という感じ。</p>\n<p>シングルタスクは良いとわかっているが、なんやかんやで他のことをやりながら作業してしまうという事があるのでたまに読んで意識しておきたいなあと思った。<br>内容は是非読んでくださいな。</p>\n<h2 id=\"実践Rust入門-［言語仕様から開発手法まで］\"><a href=\"#実践Rust入門-［言語仕様から開発手法まで］\" class=\"headerlink\" title=\"実践Rust入門 ［言語仕様から開発手法まで］\"></a><a href=\"https://gihyo.jp/book/2019/978-4-297-10559-4\" target=\"_blank\" rel=\"noopener\">実践Rust入門 ［言語仕様から開発手法まで］</a></h2><p>プログラミング言語であるRustの入門書。<br>Rustは<a href=\"https://doc.rust-jp.rs/\" target=\"_blank\" rel=\"noopener\">公式ドキュメント</a>がしっかりしているので正直買わなくてもなんとかなるかなと思ってずっと買わずにいた。<br>しかし、この本を読んで今まで買わずにいたことを後悔するくらい良い本だった。<br>この本を読んだことがないRust入門者はぜひとも読んでほしい。</p>\n<p>最初の方も結構良かったけど、7~10章あたりがすごく参考になった。<br>今でもRustでプログラミングをするときは結構参考にしている。<br>プログラミングをしているときによく読み返したくなるので、Kindleで買ったのは正解だったなと思った。</p>\n<p>11章のActixの例は、新しいバージョンが全然違ってなかなか進めづらかった。<br>現在はRustいAsync・Awaitが追加されているらしいので、そこら辺は自分で調べながらやる必要があると思う。</p>\n<h2 id=\"テスト駆動開発\"><a href=\"#テスト駆動開発\" class=\"headerlink\" title=\"テスト駆動開発\"></a><a href=\"https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">テスト駆動開発</a></h2><p>有名なTDDの説明をしている名著。<br>テスト駆動を例を示しながら進めている。<br>著者がテスト駆動開発で開発を行いながら書いているので著者がどういう思考で進めながら開発をしているのかというのが進めながら分かる。<br>また、後半ではテスト駆動開発に有用なデザインパターンやTDDの歴史などが書いてあり結構面白かった。<br>一度目は特に写経などはせずに読み進めたが、読み終えたときに写経すればよかったなあと思って2周目に突入中。</p>\n<p>TDDのことを誤解していたなあと思って、テスト駆動開発素晴らしいという気持ちがすごい。<br>今後はTDDを取り入れて開発を行いたいと思った。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>以上11月はこんな感じで本を読みました。<br>自分は本にハマる時期とプログラミングにハマる時期が交互に来るらしく、前半は普通に読書を後半はプログラミング関係の本を読むという生活でした。<br>あと、論文も5本くらい読んだ気がする。<br>12月に入ってからは本ではなく<a href=\"https://ascii.jp/elem/000/001/235/1235262/\" target=\"_blank\" rel=\"noopener\">Goなら分かるシステムプログラミング</a>にハマっていてしばらくはこれをやるかなあという感じ。<br>現在は2冊くらい本が溜まっている状態なので来年に持ち越さずに読み切りたいなあと思っています。</p>\n<p>とりあえずおすすめとしては</p>\n<p>非プログラミング系なら<a href=\"https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1\" target=\"_blank\" rel=\"noopener\">SINGLE TASK</a>、プログラミング系なら<a href=\"https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">テスト駆動開発</a>という感じです。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>読んだ本について振り返る</p>\n<h2 id=\"なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\"><a href=\"#なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\" class=\"headerlink\" title=\"なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術\"></a><a href=\"https://www.amazon.co.jp/%E3%81%AA%E3%81%9C%E7%A7%91%E5%AD%A6%E3%81%AF%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AA%E3%83%BC%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B%E2%94%80%E2%94%80%E3%83%8F%E3%83%AA%E3%82%A6%E3%83%83%E3%83%89%E3%81%AB%E5%AD%A6%E3%82%93%E3%81%A0%E4%BC%9D%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E3%83%BB%E3%82%AA%E3%83%AB%E3%82%BD%E3%83%B3/dp/4766425235\" target=\"_blank\" rel=\"noopener\">なぜ科学はストーリーを必要としているのか──ハリウッドに学んだ伝える技術</a></h2><p>博士課程を修了したにも関わらずハリウッドで映画監督になろうとしている著者が、科学者がハリウッドに習うべきことを記した本。<br>論文やこのサイトの記事などを書くときに参考になりそうな内容が詰まっていた。</p>\n<p>基本的にはABT(And, But, Therefore)を繰り返すときに読者にわかりやすい文書が書けるようになるという内容だった。<br>内容は一つのことを繰り返している印象だったけど、その一つのことが結構説得力がある内容だった気がした。<br>最近は文書を書くときに気にかけている。</p>\n<p>硬めの文章を書きつつ、説得感をもたせたい人におすすめ<br>自分は文章を書いているうちに何を書いてるかを忘れちゃうので、この本は結構参考になった。</p>\n<h2 id=\"スタンフォード式-人生デザイン講座\"><a href=\"#スタンフォード式-人生デザイン講座\" class=\"headerlink\" title=\"スタンフォード式 人生デザイン講座\"></a><a href=\"https://www.amazon.co.jp/dp/B07YG1GWWT/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">スタンフォード式 人生デザイン講座</a></h2><p>スタンフォードで教えられているライフデザインの講義の内容をまとめたもの。<br>内容についてはなるほどなーと思わされるものが結構あった。<br>しかし、読んでから1ヶ月くらい経ったけど講義の内容があんまり出来ていない。<br>なので、もう一回読み直しながら講義の内容をやろうと思っている。</p>\n<p>結構人生をどう行きていこうという人にはおすすめ。</p>\n<h2 id=\"「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\"><a href=\"#「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\" class=\"headerlink\" title=\"「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ\"></a><a href=\"https://www.amazon.co.jp/dp/B07VC4N5HW/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">「ついやってしまう」体験のつくりかた――人を動かす「直感・驚き・物語」のしくみ</a></h2><p>任天堂出身の著者がなぜゲームがこれほどの没頭感を生み出しているのかについて仕組みを解説した本。<br>僕は基本的には参考文献とかがしっかりしていない本はあんまり読まないけど、友達が面白かったと言っていたので読んでみた。</p>\n<p>マリオの例などは面白くて、マリオの操作方法は誰も教えてくれないのに誰でも操作方法が分かるという設計になっていた。という説明は目から鱗の話であった。<br>ストーリーとかのデザインをする人は結構読んでおくと面白いかもなーと思った。</p>\n<h2 id=\"SINGLE-TASK-一点集中術――「シングルタスクの原則」ですべての成果が最大になる\"><a href=\"#SINGLE-TASK-一点集中術――「シングルタスクの原則」ですべての成果が最大になる\" class=\"headerlink\" title=\"SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる\"></a><a href=\"https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1\" target=\"_blank\" rel=\"noopener\">SINGLE TASK 一点集中術――「シングルタスクの原則」ですべての成果が最大になる</a></h2><p>マルチタスクではなく、シングルタスクに専念することによって効率的に仕事を終わらせられるという本。<br>マルチタスクが良いと思っている人にはぜひとも読んでほしいなという本。<br>自分は結構知っている内容があったので、再確認という感じ。</p>\n<p>シングルタスクは良いとわかっているが、なんやかんやで他のことをやりながら作業してしまうという事があるのでたまに読んで意識しておきたいなあと思った。<br>内容は是非読んでくださいな。</p>\n<h2 id=\"実践Rust入門-［言語仕様から開発手法まで］\"><a href=\"#実践Rust入門-［言語仕様から開発手法まで］\" class=\"headerlink\" title=\"実践Rust入門 ［言語仕様から開発手法まで］\"></a><a href=\"https://gihyo.jp/book/2019/978-4-297-10559-4\" target=\"_blank\" rel=\"noopener\">実践Rust入門 ［言語仕様から開発手法まで］</a></h2><p>プログラミング言語であるRustの入門書。<br>Rustは<a href=\"https://doc.rust-jp.rs/\" target=\"_blank\" rel=\"noopener\">公式ドキュメント</a>がしっかりしているので正直買わなくてもなんとかなるかなと思ってずっと買わずにいた。<br>しかし、この本を読んで今まで買わずにいたことを後悔するくらい良い本だった。<br>この本を読んだことがないRust入門者はぜひとも読んでほしい。</p>\n<p>最初の方も結構良かったけど、7~10章あたりがすごく参考になった。<br>今でもRustでプログラミングをするときは結構参考にしている。<br>プログラミングをしているときによく読み返したくなるので、Kindleで買ったのは正解だったなと思った。</p>\n<p>11章のActixの例は、新しいバージョンが全然違ってなかなか進めづらかった。<br>現在はRustいAsync・Awaitが追加されているらしいので、そこら辺は自分で調べながらやる必要があると思う。</p>\n<h2 id=\"テスト駆動開発\"><a href=\"#テスト駆動開発\" class=\"headerlink\" title=\"テスト駆動開発\"></a><a href=\"https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">テスト駆動開発</a></h2><p>有名なTDDの説明をしている名著。<br>テスト駆動を例を示しながら進めている。<br>著者がテスト駆動開発で開発を行いながら書いているので著者がどういう思考で進めながら開発をしているのかというのが進めながら分かる。<br>また、後半ではテスト駆動開発に有用なデザインパターンやTDDの歴史などが書いてあり結構面白かった。<br>一度目は特に写経などはせずに読み進めたが、読み終えたときに写経すればよかったなあと思って2周目に突入中。</p>\n<p>TDDのことを誤解していたなあと思って、テスト駆動開発素晴らしいという気持ちがすごい。<br>今後はTDDを取り入れて開発を行いたいと思った。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>以上11月はこんな感じで本を読みました。<br>自分は本にハマる時期とプログラミングにハマる時期が交互に来るらしく、前半は普通に読書を後半はプログラミング関係の本を読むという生活でした。<br>あと、論文も5本くらい読んだ気がする。<br>12月に入ってからは本ではなく<a href=\"https://ascii.jp/elem/000/001/235/1235262/\" target=\"_blank\" rel=\"noopener\">Goなら分かるシステムプログラミング</a>にハマっていてしばらくはこれをやるかなあという感じ。<br>現在は2冊くらい本が溜まっている状態なので来年に持ち越さずに読み切りたいなあと思っています。</p>\n<p>とりあえずおすすめとしては</p>\n<p>非プログラミング系なら<a href=\"https://www.amazon.co.jp/SINGLE-TASK-%E4%B8%80%E7%82%B9%E9%9B%86%E4%B8%AD%E8%A1%93%E2%80%95%E2%80%95%E3%80%8C%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E5%8E%9F%E5%89%87%E3%80%8D%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%88%90%E6%9E%9C%E3%81%8C%E6%9C%80%E5%A4%A7%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%87%E3%83%9C%E3%83%A9%E3%83%BB%E3%82%B6%E3%83%83%E3%82%AF/dp/4478066590/ref=sr_1_1?keywords=single+task&qid=1575295678&sr=8-1\" target=\"_blank\" rel=\"noopener\">SINGLE TASK</a>、プログラミング系なら<a href=\"https://www.amazon.co.jp/dp/B077D2L69C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\" target=\"_blank\" rel=\"noopener\">テスト駆動開発</a>という感じです。</p>\n"},{"title":"efm-langserverの設定について今更ながらやってみた(Go言語)","date":"2019-11-19T09:35:07.000Z","_content":"\n[efm-langserver](https://github.com/mattn/efm-langserver)が出たときにめっちゃ便利そうやんーと思っていたんですが、色々ハマったりして時間もなかったのでしばらく放置していましたが、ついに設定してみました。\n\n### efm-langserverとは\n\n> General purpose Language Server that can use specified error message format generated from specified command. This is useful for editing code with linter.\n\nefm-langserverは特定のコマンドから生成されるエラーメッセージに特化したLanguage Serverです。\n例えばlinterとかが例に入ります。\n\n### 導入例\n\nefm-langserverを導入する利点は以下のような点が挙げられると思います。\n\n- 言語のLSが存在しないが、Linterは存在する場合\n- LSはあるが、Linterを使いたい場合\n\n1つ目の利用方法はefm-langserverのREADMEを見てもらえば出来ると思うので、今回は下について考えながら設定していきたいと思います。\n\n### なぜefm-langserverを利用するか？\n\nlinterのエラーを出力するプラグインとしては[ALE](https://github.com/dense-analysis/ale)が有名だと思います。\nALEはすごく便利なプラグインで、Linterさえ導入すればVimにエラー文などを出力してくれます。\nしかし、便利な反面プラグインとして大きすぎるという欠点があります。\n\nそこで今回は[vim-lsp](https://github.com/prabirshrestha/vim-lsp)だけで全てが完結するような設定を目指します。\n\n### 早速設定\n\n今回はGo言語の利用例について考えながらやります。\nGo言語では[gopls](https://github.com/golang/tools/tree/master/gopls)というLanguage Serverを使います。\nまた、efm-langserverで使うlinterとして[golint](https://github.com/golang/lint)を使用します。\n\n早速設定\n\n```vim\nif executable('gopls')\n    au User lsp_setup call lsp#register_server({\n        \\ 'name': 'go',\n        \\ 'cmd': {server_info->['gopls']},\n        \\ 'whitelist': ['go'],\n        \\ 'workspace_config': {'gopls': {\n        \\     'usePlaceholders': v:true,\n        \\     'completeUnimported': v:true,\n        \\   }},\n        \\ })\nendif\n\nif executable('efm-langserver')\n  augroup LspEFM\n    au!\n    autocmd User lsp_setup call lsp#register_server({\n        \\ 'name': 'efm-langserver',\n        \\ 'cmd': {server_info->['efm-langserver', '-c='.$HOME.'/.config/efm-langserver/config.yaml', '-log='.g:log_files_dir.'/efm-langserver.log']},\n        \\ 'whitelist': ['go'],\n        \\ })\n  augroup END\nendif\n```\n\n1つ目がgoplsの設定で2つ目がefm-langserverの設定です。\n\nそして、`~/.config/efm-langserver/config.yaml`に以下のような設定を行います。\n\n```yaml\nlanguages:\n  go:\n    lint-command: 'golint -set_exit_status=1'\n    lint-formats:\n      - '%f:%l:%c:%m'\n```\n\nこれで両立可能です！\n以下の画像が実際の様子です。\n関数の`Hello`と`hello`がタイポしているので起こっているエラーがgoplsのエラーです。\n`Hello`という公開関数に対してコメントを書きなさいと怒られているエラーがgolintのエラーです。\nちゃんと設定できてますね！\n\n<img src=\"/css/images/efm-langserver.png\" alt=\"\" align=\"left\" style=\"max-height: 500px;\">\n<br style=\"clear:left;\">\n\nこれで終わりでもいいのですが、efm-langserverについての補足を少しだけします。\n\n### linterのexitステータスは1である必要がある\n\nefm-langserverはexistステータスに以上がある場合にエラーをlinterの内容を出力する設定になっています。\n`golint`は何故かexitステータスがデフォルトだと0になるようになっているみたいなので、`-set_exit_status=1`というように指定する必要があります。\n\n### lint-formatsを設定する\n\nlint-formatsはefm-langserverの設定でデフォルトだと、`%f:%l:%m`と`%f:%l:%c:%m`の2つが設定されています。\nこの2つでパースするとgolintは両方の設定に成功してしまします。\nそして、Diagnosticsが2つ送られて来てしまい、Diagnosticsが２つ存在してしまいます。\nなので、`lint-formats:`で正しい方のフォーマットを指定しました。\n\nちなみに、エラーformatは[Vimのエラーフォーマット構文](https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format)を使っているみたいなので、こちらを参考にしてください。\n\n## まとめ\n\ngoでgoplsの他にgolintのエラーも出るようになった！\n\n#### ( 2019/12/06 追記\n\n11月末に取り込まれた[変更](https://github.com/mattn/efm-langserver/commit/0bbc17debeaa88e224817d6364cb8d5b0c8f388f)によってexitステータスが0でも行けるようになりました。\nその場合以下のような設定でいけます。\n\n```yaml\nlanguages:\n  go:\n    lint-command: 'golint'\n    lint-ignore-exit-code: true\n    lint-formats:\n      - '%f:%l:%c:%m'\n```\n\n","source":"_posts/efm-langserver.md","raw":"---\ntitle: efm-langserverの設定について今更ながらやってみた(Go言語)\ndate: 2019-11-19 18:35:07\ntags:\n- vim\n- LSP\n---\n\n[efm-langserver](https://github.com/mattn/efm-langserver)が出たときにめっちゃ便利そうやんーと思っていたんですが、色々ハマったりして時間もなかったのでしばらく放置していましたが、ついに設定してみました。\n\n### efm-langserverとは\n\n> General purpose Language Server that can use specified error message format generated from specified command. This is useful for editing code with linter.\n\nefm-langserverは特定のコマンドから生成されるエラーメッセージに特化したLanguage Serverです。\n例えばlinterとかが例に入ります。\n\n### 導入例\n\nefm-langserverを導入する利点は以下のような点が挙げられると思います。\n\n- 言語のLSが存在しないが、Linterは存在する場合\n- LSはあるが、Linterを使いたい場合\n\n1つ目の利用方法はefm-langserverのREADMEを見てもらえば出来ると思うので、今回は下について考えながら設定していきたいと思います。\n\n### なぜefm-langserverを利用するか？\n\nlinterのエラーを出力するプラグインとしては[ALE](https://github.com/dense-analysis/ale)が有名だと思います。\nALEはすごく便利なプラグインで、Linterさえ導入すればVimにエラー文などを出力してくれます。\nしかし、便利な反面プラグインとして大きすぎるという欠点があります。\n\nそこで今回は[vim-lsp](https://github.com/prabirshrestha/vim-lsp)だけで全てが完結するような設定を目指します。\n\n### 早速設定\n\n今回はGo言語の利用例について考えながらやります。\nGo言語では[gopls](https://github.com/golang/tools/tree/master/gopls)というLanguage Serverを使います。\nまた、efm-langserverで使うlinterとして[golint](https://github.com/golang/lint)を使用します。\n\n早速設定\n\n```vim\nif executable('gopls')\n    au User lsp_setup call lsp#register_server({\n        \\ 'name': 'go',\n        \\ 'cmd': {server_info->['gopls']},\n        \\ 'whitelist': ['go'],\n        \\ 'workspace_config': {'gopls': {\n        \\     'usePlaceholders': v:true,\n        \\     'completeUnimported': v:true,\n        \\   }},\n        \\ })\nendif\n\nif executable('efm-langserver')\n  augroup LspEFM\n    au!\n    autocmd User lsp_setup call lsp#register_server({\n        \\ 'name': 'efm-langserver',\n        \\ 'cmd': {server_info->['efm-langserver', '-c='.$HOME.'/.config/efm-langserver/config.yaml', '-log='.g:log_files_dir.'/efm-langserver.log']},\n        \\ 'whitelist': ['go'],\n        \\ })\n  augroup END\nendif\n```\n\n1つ目がgoplsの設定で2つ目がefm-langserverの設定です。\n\nそして、`~/.config/efm-langserver/config.yaml`に以下のような設定を行います。\n\n```yaml\nlanguages:\n  go:\n    lint-command: 'golint -set_exit_status=1'\n    lint-formats:\n      - '%f:%l:%c:%m'\n```\n\nこれで両立可能です！\n以下の画像が実際の様子です。\n関数の`Hello`と`hello`がタイポしているので起こっているエラーがgoplsのエラーです。\n`Hello`という公開関数に対してコメントを書きなさいと怒られているエラーがgolintのエラーです。\nちゃんと設定できてますね！\n\n<img src=\"/css/images/efm-langserver.png\" alt=\"\" align=\"left\" style=\"max-height: 500px;\">\n<br style=\"clear:left;\">\n\nこれで終わりでもいいのですが、efm-langserverについての補足を少しだけします。\n\n### linterのexitステータスは1である必要がある\n\nefm-langserverはexistステータスに以上がある場合にエラーをlinterの内容を出力する設定になっています。\n`golint`は何故かexitステータスがデフォルトだと0になるようになっているみたいなので、`-set_exit_status=1`というように指定する必要があります。\n\n### lint-formatsを設定する\n\nlint-formatsはefm-langserverの設定でデフォルトだと、`%f:%l:%m`と`%f:%l:%c:%m`の2つが設定されています。\nこの2つでパースするとgolintは両方の設定に成功してしまします。\nそして、Diagnosticsが2つ送られて来てしまい、Diagnosticsが２つ存在してしまいます。\nなので、`lint-formats:`で正しい方のフォーマットを指定しました。\n\nちなみに、エラーformatは[Vimのエラーフォーマット構文](https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format)を使っているみたいなので、こちらを参考にしてください。\n\n## まとめ\n\ngoでgoplsの他にgolintのエラーも出るようになった！\n\n#### ( 2019/12/06 追記\n\n11月末に取り込まれた[変更](https://github.com/mattn/efm-langserver/commit/0bbc17debeaa88e224817d6364cb8d5b0c8f388f)によってexitステータスが0でも行けるようになりました。\nその場合以下のような設定でいけます。\n\n```yaml\nlanguages:\n  go:\n    lint-command: 'golint'\n    lint-ignore-exit-code: true\n    lint-formats:\n      - '%f:%l:%c:%m'\n```\n\n","slug":"efm-langserver","published":1,"updated":"2019-12-06T11:40:10.127Z","_id":"ck3oj341t0008zqpgal1ehl7x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/mattn/efm-langserver\" target=\"_blank\" rel=\"noopener\">efm-langserver</a>が出たときにめっちゃ便利そうやんーと思っていたんですが、色々ハマったりして時間もなかったのでしばらく放置していましたが、ついに設定してみました。</p>\n<h3 id=\"efm-langserverとは\"><a href=\"#efm-langserverとは\" class=\"headerlink\" title=\"efm-langserverとは\"></a>efm-langserverとは</h3><blockquote>\n<p>General purpose Language Server that can use specified error message format generated from specified command. This is useful for editing code with linter.</p>\n</blockquote>\n<p>efm-langserverは特定のコマンドから生成されるエラーメッセージに特化したLanguage Serverです。<br>例えばlinterとかが例に入ります。</p>\n<h3 id=\"導入例\"><a href=\"#導入例\" class=\"headerlink\" title=\"導入例\"></a>導入例</h3><p>efm-langserverを導入する利点は以下のような点が挙げられると思います。</p>\n<ul>\n<li>言語のLSが存在しないが、Linterは存在する場合</li>\n<li>LSはあるが、Linterを使いたい場合</li>\n</ul>\n<p>1つ目の利用方法はefm-langserverのREADMEを見てもらえば出来ると思うので、今回は下について考えながら設定していきたいと思います。</p>\n<h3 id=\"なぜefm-langserverを利用するか？\"><a href=\"#なぜefm-langserverを利用するか？\" class=\"headerlink\" title=\"なぜefm-langserverを利用するか？\"></a>なぜefm-langserverを利用するか？</h3><p>linterのエラーを出力するプラグインとしては<a href=\"https://github.com/dense-analysis/ale\" target=\"_blank\" rel=\"noopener\">ALE</a>が有名だと思います。<br>ALEはすごく便利なプラグインで、Linterさえ導入すればVimにエラー文などを出力してくれます。<br>しかし、便利な反面プラグインとして大きすぎるという欠点があります。</p>\n<p>そこで今回は<a href=\"https://github.com/prabirshrestha/vim-lsp\" target=\"_blank\" rel=\"noopener\">vim-lsp</a>だけで全てが完結するような設定を目指します。</p>\n<h3 id=\"早速設定\"><a href=\"#早速設定\" class=\"headerlink\" title=\"早速設定\"></a>早速設定</h3><p>今回はGo言語の利用例について考えながらやります。<br>Go言語では<a href=\"https://github.com/golang/tools/tree/master/gopls\" target=\"_blank\" rel=\"noopener\">gopls</a>というLanguage Serverを使います。<br>また、efm-langserverで使うlinterとして<a href=\"https://github.com/golang/lint\" target=\"_blank\" rel=\"noopener\">golint</a>を使用します。</p>\n<p>早速設定</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">executable</span>(<span class=\"string\">'gopls'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">au</span> User lsp_setup <span class=\"keyword\">call</span> lsp#register_server(&#123;</span><br><span class=\"line\">        \\ <span class=\"string\">'name'</span>: <span class=\"string\">'go'</span>,</span><br><span class=\"line\">        \\ <span class=\"string\">'cmd'</span>: &#123;server_info-&gt;[<span class=\"string\">'gopls'</span>]&#125;,</span><br><span class=\"line\">        \\ <span class=\"string\">'whitelist'</span>: [<span class=\"string\">'go'</span>],</span><br><span class=\"line\">        \\ <span class=\"string\">'workspace_config'</span>: &#123;<span class=\"string\">'gopls'</span>: &#123;</span><br><span class=\"line\">        \\     <span class=\"string\">'usePlaceholders'</span>: <span class=\"variable\">v:true</span>,</span><br><span class=\"line\">        \\     <span class=\"string\">'completeUnimported'</span>: <span class=\"variable\">v:true</span>,</span><br><span class=\"line\">        \\   &#125;&#125;,</span><br><span class=\"line\">        \\ &#125;)</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">executable</span>(<span class=\"string\">'efm-langserver'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">augroup</span> LspEFM</span><br><span class=\"line\">    au!</span><br><span class=\"line\">    <span class=\"keyword\">autocmd</span> User lsp_setup <span class=\"keyword\">call</span> lsp#register_server(&#123;</span><br><span class=\"line\">        \\ <span class=\"string\">'name'</span>: <span class=\"string\">'efm-langserver'</span>,</span><br><span class=\"line\">        \\ <span class=\"string\">'cmd'</span>: &#123;server_info-&gt;[<span class=\"string\">'efm-langserver'</span>, <span class=\"string\">'-c='</span>.$HOME.<span class=\"string\">'/.config/efm-langserver/config.yaml'</span>, <span class=\"string\">'-log='</span>.<span class=\"variable\">g:log_files_dir</span>.<span class=\"string\">'/efm-langserver.log'</span>]&#125;,</span><br><span class=\"line\">        \\ <span class=\"string\">'whitelist'</span>: [<span class=\"string\">'go'</span>],</span><br><span class=\"line\">        \\ &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">augroup</span> END</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure>\n\n<p>1つ目がgoplsの設定で2つ目がefm-langserverの設定です。</p>\n<p>そして、<code>~/.config/efm-langserver/config.yaml</code>に以下のような設定を行います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"attr\">go:</span></span><br><span class=\"line\">    <span class=\"attr\">lint-command:</span> <span class=\"string\">'golint -set_exit_status=1'</span></span><br><span class=\"line\">    <span class=\"attr\">lint-formats:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'%f:%l:%c:%m'</span></span><br></pre></td></tr></table></figure>\n\n<p>これで両立可能です！<br>以下の画像が実際の様子です。<br>関数の<code>Hello</code>と<code>hello</code>がタイポしているので起こっているエラーがgoplsのエラーです。<br><code>Hello</code>という公開関数に対してコメントを書きなさいと怒られているエラーがgolintのエラーです。<br>ちゃんと設定できてますね！</p>\n<img src=\"/css/images/efm-langserver.png\" alt=\"\" align=\"left\" style=\"max-height: 500px;\">\n<br style=\"clear:left;\">\n\n<p>これで終わりでもいいのですが、efm-langserverについての補足を少しだけします。</p>\n<h3 id=\"linterのexitステータスは1である必要がある\"><a href=\"#linterのexitステータスは1である必要がある\" class=\"headerlink\" title=\"linterのexitステータスは1である必要がある\"></a>linterのexitステータスは1である必要がある</h3><p>efm-langserverはexistステータスに以上がある場合にエラーをlinterの内容を出力する設定になっています。<br><code>golint</code>は何故かexitステータスがデフォルトだと0になるようになっているみたいなので、<code>-set_exit_status=1</code>というように指定する必要があります。</p>\n<h3 id=\"lint-formatsを設定する\"><a href=\"#lint-formatsを設定する\" class=\"headerlink\" title=\"lint-formatsを設定する\"></a>lint-formatsを設定する</h3><p>lint-formatsはefm-langserverの設定でデフォルトだと、<code>%f:%l:%m</code>と<code>%f:%l:%c:%m</code>の2つが設定されています。<br>この2つでパースするとgolintは両方の設定に成功してしまします。<br>そして、Diagnosticsが2つ送られて来てしまい、Diagnosticsが２つ存在してしまいます。<br>なので、<code>lint-formats:</code>で正しい方のフォーマットを指定しました。</p>\n<p>ちなみに、エラーformatは<a href=\"https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format\" target=\"_blank\" rel=\"noopener\">Vimのエラーフォーマット構文</a>を使っているみたいなので、こちらを参考にしてください。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>goでgoplsの他にgolintのエラーも出るようになった！</p>\n<h4 id=\"2019-12-06-追記\"><a href=\"#2019-12-06-追記\" class=\"headerlink\" title=\"( 2019/12/06 追記\"></a>( 2019/12/06 追記</h4><p>11月末に取り込まれた<a href=\"https://github.com/mattn/efm-langserver/commit/0bbc17debeaa88e224817d6364cb8d5b0c8f388f\" target=\"_blank\" rel=\"noopener\">変更</a>によってexitステータスが0でも行けるようになりました。<br>その場合以下のような設定でいけます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"attr\">go:</span></span><br><span class=\"line\">    <span class=\"attr\">lint-command:</span> <span class=\"string\">'golint'</span></span><br><span class=\"line\">    <span class=\"attr\">lint-ignore-exit-code:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">lint-formats:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'%f:%l:%c:%m'</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/mattn/efm-langserver\" target=\"_blank\" rel=\"noopener\">efm-langserver</a>が出たときにめっちゃ便利そうやんーと思っていたんですが、色々ハマったりして時間もなかったのでしばらく放置していましたが、ついに設定してみました。</p>\n<h3 id=\"efm-langserverとは\"><a href=\"#efm-langserverとは\" class=\"headerlink\" title=\"efm-langserverとは\"></a>efm-langserverとは</h3><blockquote>\n<p>General purpose Language Server that can use specified error message format generated from specified command. This is useful for editing code with linter.</p>\n</blockquote>\n<p>efm-langserverは特定のコマンドから生成されるエラーメッセージに特化したLanguage Serverです。<br>例えばlinterとかが例に入ります。</p>\n<h3 id=\"導入例\"><a href=\"#導入例\" class=\"headerlink\" title=\"導入例\"></a>導入例</h3><p>efm-langserverを導入する利点は以下のような点が挙げられると思います。</p>\n<ul>\n<li>言語のLSが存在しないが、Linterは存在する場合</li>\n<li>LSはあるが、Linterを使いたい場合</li>\n</ul>\n<p>1つ目の利用方法はefm-langserverのREADMEを見てもらえば出来ると思うので、今回は下について考えながら設定していきたいと思います。</p>\n<h3 id=\"なぜefm-langserverを利用するか？\"><a href=\"#なぜefm-langserverを利用するか？\" class=\"headerlink\" title=\"なぜefm-langserverを利用するか？\"></a>なぜefm-langserverを利用するか？</h3><p>linterのエラーを出力するプラグインとしては<a href=\"https://github.com/dense-analysis/ale\" target=\"_blank\" rel=\"noopener\">ALE</a>が有名だと思います。<br>ALEはすごく便利なプラグインで、Linterさえ導入すればVimにエラー文などを出力してくれます。<br>しかし、便利な反面プラグインとして大きすぎるという欠点があります。</p>\n<p>そこで今回は<a href=\"https://github.com/prabirshrestha/vim-lsp\" target=\"_blank\" rel=\"noopener\">vim-lsp</a>だけで全てが完結するような設定を目指します。</p>\n<h3 id=\"早速設定\"><a href=\"#早速設定\" class=\"headerlink\" title=\"早速設定\"></a>早速設定</h3><p>今回はGo言語の利用例について考えながらやります。<br>Go言語では<a href=\"https://github.com/golang/tools/tree/master/gopls\" target=\"_blank\" rel=\"noopener\">gopls</a>というLanguage Serverを使います。<br>また、efm-langserverで使うlinterとして<a href=\"https://github.com/golang/lint\" target=\"_blank\" rel=\"noopener\">golint</a>を使用します。</p>\n<p>早速設定</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">executable</span>(<span class=\"string\">'gopls'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">au</span> User lsp_setup <span class=\"keyword\">call</span> lsp#register_server(&#123;</span><br><span class=\"line\">        \\ <span class=\"string\">'name'</span>: <span class=\"string\">'go'</span>,</span><br><span class=\"line\">        \\ <span class=\"string\">'cmd'</span>: &#123;server_info-&gt;[<span class=\"string\">'gopls'</span>]&#125;,</span><br><span class=\"line\">        \\ <span class=\"string\">'whitelist'</span>: [<span class=\"string\">'go'</span>],</span><br><span class=\"line\">        \\ <span class=\"string\">'workspace_config'</span>: &#123;<span class=\"string\">'gopls'</span>: &#123;</span><br><span class=\"line\">        \\     <span class=\"string\">'usePlaceholders'</span>: <span class=\"variable\">v:true</span>,</span><br><span class=\"line\">        \\     <span class=\"string\">'completeUnimported'</span>: <span class=\"variable\">v:true</span>,</span><br><span class=\"line\">        \\   &#125;&#125;,</span><br><span class=\"line\">        \\ &#125;)</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">executable</span>(<span class=\"string\">'efm-langserver'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">augroup</span> LspEFM</span><br><span class=\"line\">    au!</span><br><span class=\"line\">    <span class=\"keyword\">autocmd</span> User lsp_setup <span class=\"keyword\">call</span> lsp#register_server(&#123;</span><br><span class=\"line\">        \\ <span class=\"string\">'name'</span>: <span class=\"string\">'efm-langserver'</span>,</span><br><span class=\"line\">        \\ <span class=\"string\">'cmd'</span>: &#123;server_info-&gt;[<span class=\"string\">'efm-langserver'</span>, <span class=\"string\">'-c='</span>.$HOME.<span class=\"string\">'/.config/efm-langserver/config.yaml'</span>, <span class=\"string\">'-log='</span>.<span class=\"variable\">g:log_files_dir</span>.<span class=\"string\">'/efm-langserver.log'</span>]&#125;,</span><br><span class=\"line\">        \\ <span class=\"string\">'whitelist'</span>: [<span class=\"string\">'go'</span>],</span><br><span class=\"line\">        \\ &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">augroup</span> END</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure>\n\n<p>1つ目がgoplsの設定で2つ目がefm-langserverの設定です。</p>\n<p>そして、<code>~/.config/efm-langserver/config.yaml</code>に以下のような設定を行います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"attr\">go:</span></span><br><span class=\"line\">    <span class=\"attr\">lint-command:</span> <span class=\"string\">'golint -set_exit_status=1'</span></span><br><span class=\"line\">    <span class=\"attr\">lint-formats:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'%f:%l:%c:%m'</span></span><br></pre></td></tr></table></figure>\n\n<p>これで両立可能です！<br>以下の画像が実際の様子です。<br>関数の<code>Hello</code>と<code>hello</code>がタイポしているので起こっているエラーがgoplsのエラーです。<br><code>Hello</code>という公開関数に対してコメントを書きなさいと怒られているエラーがgolintのエラーです。<br>ちゃんと設定できてますね！</p>\n<img src=\"/css/images/efm-langserver.png\" alt=\"\" align=\"left\" style=\"max-height: 500px;\">\n<br style=\"clear:left;\">\n\n<p>これで終わりでもいいのですが、efm-langserverについての補足を少しだけします。</p>\n<h3 id=\"linterのexitステータスは1である必要がある\"><a href=\"#linterのexitステータスは1である必要がある\" class=\"headerlink\" title=\"linterのexitステータスは1である必要がある\"></a>linterのexitステータスは1である必要がある</h3><p>efm-langserverはexistステータスに以上がある場合にエラーをlinterの内容を出力する設定になっています。<br><code>golint</code>は何故かexitステータスがデフォルトだと0になるようになっているみたいなので、<code>-set_exit_status=1</code>というように指定する必要があります。</p>\n<h3 id=\"lint-formatsを設定する\"><a href=\"#lint-formatsを設定する\" class=\"headerlink\" title=\"lint-formatsを設定する\"></a>lint-formatsを設定する</h3><p>lint-formatsはefm-langserverの設定でデフォルトだと、<code>%f:%l:%m</code>と<code>%f:%l:%c:%m</code>の2つが設定されています。<br>この2つでパースするとgolintは両方の設定に成功してしまします。<br>そして、Diagnosticsが2つ送られて来てしまい、Diagnosticsが２つ存在してしまいます。<br>なので、<code>lint-formats:</code>で正しい方のフォーマットを指定しました。</p>\n<p>ちなみに、エラーformatは<a href=\"https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format\" target=\"_blank\" rel=\"noopener\">Vimのエラーフォーマット構文</a>を使っているみたいなので、こちらを参考にしてください。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>goでgoplsの他にgolintのエラーも出るようになった！</p>\n<h4 id=\"2019-12-06-追記\"><a href=\"#2019-12-06-追記\" class=\"headerlink\" title=\"( 2019/12/06 追記\"></a>( 2019/12/06 追記</h4><p>11月末に取り込まれた<a href=\"https://github.com/mattn/efm-langserver/commit/0bbc17debeaa88e224817d6364cb8d5b0c8f388f\" target=\"_blank\" rel=\"noopener\">変更</a>によってexitステータスが0でも行けるようになりました。<br>その場合以下のような設定でいけます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\">  <span class=\"attr\">go:</span></span><br><span class=\"line\">    <span class=\"attr\">lint-command:</span> <span class=\"string\">'golint'</span></span><br><span class=\"line\">    <span class=\"attr\">lint-ignore-exit-code:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">lint-formats:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'%f:%l:%c:%m'</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"ブログ作ってみた","_content":"\n[Hexo](https://hexo.io/)を使ってブログを開設してみました。\n正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。\n","source":"_posts/hello-world.md","raw":"---\ntitle: ブログ作ってみた\n---\n\n[Hexo](https://hexo.io/)を使ってブログを開設してみました。\n正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。\n","slug":"hello-world","published":1,"date":"2019-11-01T09:40:43.757Z","updated":"2019-11-01T09:40:43.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3oj341v0009zqpgcgpg4sp0","content":"<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>を使ってブログを開設してみました。<br>正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>を使ってブログを開設してみました。<br>正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。</p>\n"},{"title":"hexoをGitHub Pagesで使うための設定","date":"2019-11-03T08:15:43.000Z","_content":"\nせっかくなのでブログを1つくらい更新しようかなと思います。\n\n現在僕はGitHub Pagesとhexoを使ってページを公開しています。\nまあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。\n\n### hexoとは？\n\n[hexo](https://hexo.io)とは静的サイトジェネレーターです。\n基本的にはマークダウンファイルを書くだけでブログを更新できます。\nまた、テーマなども複数ありかなり応用が効きそうです。\n(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)\n\n### Github Pagesについて\n\n[Github Pages](https://pages.github.com/)とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。\n無料でWebページが作成出来るのでかなり便利です。\nただし、ページを公開するための制約が何個かあります。\n\n1. 静的ファイルしか公開することができない\n1. masterブランチまたはgh-pagesブランチにあるファイルを公開する\n\nつまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。\n\n## デプロイをするときの問題点\n\n実はhexoではマークダウンで書いた後に、`hexo generate`と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの `/docs` 以下をウェブサイトとして公開することができます。つまり、hexoの `_config.yaml` を以下の用に書き換えればいいわけです。\n\n```yaml\n# Directory\nsource_dir: source\npublic_dir: docs  # <-- ここをdocsにする\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n```\n\nそれを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。\n\n\nしかし、僕のサイトのような`{username}.github.io`というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。\n\nしたがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。\n\n\n## 解決策を書く前に\n\n実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。\n`hexo deploy`とはhexoのウェブページをデプロイするための機能です。今回は `_config.yml` の該当箇所を以下のように直せば動かすことができます。\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:{your github name}/{your github name}.github.io.git\n  branch: master\n```\n\nこれを書いた後、 `hexo deploy`と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。\n\nおそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)\n\n## ではやっと解決策\n\n今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。\n\n- [Hexo io: GitHub Pages](https://hexo.io/docs/github-pages.html)\n- [Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]](https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690)\n\nではやっと本題へ。\n\n今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで `hexo deploy`を実行するという単純なものです。\n\n`hexo deploy`の設定については先程の [`hexo deploy`を使う](#解決策を書く前に)通りに `_config.yml` を変更してください。\n\n### Travis CIの設定\n\nTravis CIの設定については3つのステップがあります。\n\n1. masterブランチにプッシュするための公開鍵の用意\n1. travis CIで使うための秘密鍵の用意\n1. travis.ymlの設定\n\nこれらを順に解説していきます。\n\n#### masterブランチにプッシュするための公開鍵の用意\n\nまずはmasterブランチにプッシュするためのssh keyファイルを用意します。\n以下のコマンドを {username}.github.ioディレクトリの下で実行してください。\n\n```\n$ ssh-keygen -t rsa -N '' -f deploy_key\n```\n\nこれを実行することで、 `deploy_key`(秘密鍵)と `deploy_key.pub`(公開鍵)の2つができます。\n**これらは間違ってコミットしないように `.gitignore`に登録しておきましょう。**\nでは、`deploy_key.pub`をGitHubに登録しましょう。\n\nまず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 `Deploy Keys`というタブがあると思います。そこへ行って、`add deploy key`というボタンをクリックします。このフォームへ先程の`deploy_key.pub`の中身を登録します。必ず `Allow write access`にチェックをつけてください。\n\nさあ、これで公開鍵の登録は終了しました。\n次にTravisの方で秘密鍵を使うための設定を行っていきます。\n\n### Travis CIで使うための秘密鍵の用意\n\nまずはtravisのCLIを導入していきます。\n\n```\n$ gem install travis\n\n# Githubアカウントでログインする\n$ travis login\n```\n\n次に、先程作成した秘密鍵を暗号化し、travisに設定します。\n\n```\n$ touch .travis.yml && travis encrypt-file ./deploy_key --add\n```\n\nこれを実行すると `deploy_key.enc`ファイルと `.travis.yml`が作成されているのが分かると思います。\n次に `.travis.yml`ファイルの中を見ると以下のようなコードが挿入されていると思います。\n\n```yaml\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d\n```\n\nこれで秘密鍵の設定は完了しました。\n** `deploy_key.enc`ファイルをGitで管理するということを忘れないでください。**\n.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。\nでは最後にtravisの設定をしていきましょう。\n\n### travis.ymlの設定\n\n.travis.ymlの設定は以下の通りです。\n\n```yaml\nsudo: false\nlanguage: node_js\nnode_js:\n- 12\ncache: npm\nbranches:\n  only:\n  - deploy\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d ### ここは先程のコードです。\n- eval \"$(ssh-agent -s)\"\n- chmod 600 ./deploy_key\n- echo -e \"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- ssh-add ./deploy_key\nscript:\n- hexo generate\n- hexo deploy\n```\n\nこれらの簡単な解説をします。\n`branches:` はどのブランチでこのtravisを実行するかを設定しています。今回の場合は `deploy`ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。\n\n次に `before_install` についてです。このコードはsshキーの設定を行っています。最初の `openssl ....`は先程作成した `deploy_key.enc`を復号化するためのコマンドです。それ以下では復号した `deploy_key`をsshキーとして使う設定を行っています。\n`before_install`は以下の `script`の前に実行されます。\n\n最後に `script`についてです。といってもこれについては解説する意味もなさそうですね。笑\nただ、hemlにコンパイルを行い、それらをdeployするだけです。\n\n\n## 自動デプロイしてみる\n\nそれではここまでが終わったら、`deploy`ブランチにプッシュしてみましょう。\nそうすると [travis](https://travis-ci.com/)のページを確認するとCIが走っているのが確認出来ると思います。\nもし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。\n\nもし、CIがうまくはしればmasterにデプロイが完了しているはずです。\nお疲れさまです。\n\n\n## 最後に\n\n今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。\nもし、読んでいる人の参考になればとても嬉しいです。\n\n\n## もしバグが起こった場合\n\nTravisで以下のようなエラーが起った場合についてです。\n\n```\niv undefined\nThe command \"openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d\" failed and exited with 1 during .\n```\n\nこれについては[このissue](https://github.com/travis-ci/travis.rb/issues/607)が参考になりました。\n僕の場合の解決方法です。\n\n```\n$ travis encrypt-file ./deploy_key --pro\n```\n\nこれを実行したときに出てくる `openssl ...` をtravis.ymlの同じ部分を置き換えて、新しくできた `deploy_key.enc` と一緒にプッシュしてみましょう。\n","source":"_posts/hexo-setting.md","raw":"---\ntitle: hexoをGitHub Pagesで使うための設定\ndate: 2019-11-03 17:15:43\ntags:\n- hexo\n- Github Pages\n- travis\n---\n\nせっかくなのでブログを1つくらい更新しようかなと思います。\n\n現在僕はGitHub Pagesとhexoを使ってページを公開しています。\nまあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。\n\n### hexoとは？\n\n[hexo](https://hexo.io)とは静的サイトジェネレーターです。\n基本的にはマークダウンファイルを書くだけでブログを更新できます。\nまた、テーマなども複数ありかなり応用が効きそうです。\n(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)\n\n### Github Pagesについて\n\n[Github Pages](https://pages.github.com/)とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。\n無料でWebページが作成出来るのでかなり便利です。\nただし、ページを公開するための制約が何個かあります。\n\n1. 静的ファイルしか公開することができない\n1. masterブランチまたはgh-pagesブランチにあるファイルを公開する\n\nつまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。\n\n## デプロイをするときの問題点\n\n実はhexoではマークダウンで書いた後に、`hexo generate`と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの `/docs` 以下をウェブサイトとして公開することができます。つまり、hexoの `_config.yaml` を以下の用に書き換えればいいわけです。\n\n```yaml\n# Directory\nsource_dir: source\npublic_dir: docs  # <-- ここをdocsにする\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n```\n\nそれを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。\n\n\nしかし、僕のサイトのような`{username}.github.io`というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。\n\nしたがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。\n\n\n## 解決策を書く前に\n\n実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。\n`hexo deploy`とはhexoのウェブページをデプロイするための機能です。今回は `_config.yml` の該当箇所を以下のように直せば動かすことができます。\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:{your github name}/{your github name}.github.io.git\n  branch: master\n```\n\nこれを書いた後、 `hexo deploy`と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。\n\nおそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)\n\n## ではやっと解決策\n\n今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。\n\n- [Hexo io: GitHub Pages](https://hexo.io/docs/github-pages.html)\n- [Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]](https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690)\n\nではやっと本題へ。\n\n今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで `hexo deploy`を実行するという単純なものです。\n\n`hexo deploy`の設定については先程の [`hexo deploy`を使う](#解決策を書く前に)通りに `_config.yml` を変更してください。\n\n### Travis CIの設定\n\nTravis CIの設定については3つのステップがあります。\n\n1. masterブランチにプッシュするための公開鍵の用意\n1. travis CIで使うための秘密鍵の用意\n1. travis.ymlの設定\n\nこれらを順に解説していきます。\n\n#### masterブランチにプッシュするための公開鍵の用意\n\nまずはmasterブランチにプッシュするためのssh keyファイルを用意します。\n以下のコマンドを {username}.github.ioディレクトリの下で実行してください。\n\n```\n$ ssh-keygen -t rsa -N '' -f deploy_key\n```\n\nこれを実行することで、 `deploy_key`(秘密鍵)と `deploy_key.pub`(公開鍵)の2つができます。\n**これらは間違ってコミットしないように `.gitignore`に登録しておきましょう。**\nでは、`deploy_key.pub`をGitHubに登録しましょう。\n\nまず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 `Deploy Keys`というタブがあると思います。そこへ行って、`add deploy key`というボタンをクリックします。このフォームへ先程の`deploy_key.pub`の中身を登録します。必ず `Allow write access`にチェックをつけてください。\n\nさあ、これで公開鍵の登録は終了しました。\n次にTravisの方で秘密鍵を使うための設定を行っていきます。\n\n### Travis CIで使うための秘密鍵の用意\n\nまずはtravisのCLIを導入していきます。\n\n```\n$ gem install travis\n\n# Githubアカウントでログインする\n$ travis login\n```\n\n次に、先程作成した秘密鍵を暗号化し、travisに設定します。\n\n```\n$ touch .travis.yml && travis encrypt-file ./deploy_key --add\n```\n\nこれを実行すると `deploy_key.enc`ファイルと `.travis.yml`が作成されているのが分かると思います。\n次に `.travis.yml`ファイルの中を見ると以下のようなコードが挿入されていると思います。\n\n```yaml\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d\n```\n\nこれで秘密鍵の設定は完了しました。\n** `deploy_key.enc`ファイルをGitで管理するということを忘れないでください。**\n.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。\nでは最後にtravisの設定をしていきましょう。\n\n### travis.ymlの設定\n\n.travis.ymlの設定は以下の通りです。\n\n```yaml\nsudo: false\nlanguage: node_js\nnode_js:\n- 12\ncache: npm\nbranches:\n  only:\n  - deploy\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d ### ここは先程のコードです。\n- eval \"$(ssh-agent -s)\"\n- chmod 600 ./deploy_key\n- echo -e \"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- ssh-add ./deploy_key\nscript:\n- hexo generate\n- hexo deploy\n```\n\nこれらの簡単な解説をします。\n`branches:` はどのブランチでこのtravisを実行するかを設定しています。今回の場合は `deploy`ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。\n\n次に `before_install` についてです。このコードはsshキーの設定を行っています。最初の `openssl ....`は先程作成した `deploy_key.enc`を復号化するためのコマンドです。それ以下では復号した `deploy_key`をsshキーとして使う設定を行っています。\n`before_install`は以下の `script`の前に実行されます。\n\n最後に `script`についてです。といってもこれについては解説する意味もなさそうですね。笑\nただ、hemlにコンパイルを行い、それらをdeployするだけです。\n\n\n## 自動デプロイしてみる\n\nそれではここまでが終わったら、`deploy`ブランチにプッシュしてみましょう。\nそうすると [travis](https://travis-ci.com/)のページを確認するとCIが走っているのが確認出来ると思います。\nもし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。\n\nもし、CIがうまくはしればmasterにデプロイが完了しているはずです。\nお疲れさまです。\n\n\n## 最後に\n\n今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。\nもし、読んでいる人の参考になればとても嬉しいです。\n\n\n## もしバグが起こった場合\n\nTravisで以下のようなエラーが起った場合についてです。\n\n```\niv undefined\nThe command \"openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d\" failed and exited with 1 during .\n```\n\nこれについては[このissue](https://github.com/travis-ci/travis.rb/issues/607)が参考になりました。\n僕の場合の解決方法です。\n\n```\n$ travis encrypt-file ./deploy_key --pro\n```\n\nこれを実行したときに出てくる `openssl ...` をtravis.ymlの同じ部分を置き換えて、新しくできた `deploy_key.enc` と一緒にプッシュしてみましょう。\n","slug":"hexo-setting","published":1,"updated":"2019-11-03T09:50:27.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3oj341x000bzqpg7ta97s67","content":"<p>せっかくなのでブログを1つくらい更新しようかなと思います。</p>\n<p>現在僕はGitHub Pagesとhexoを使ってページを公開しています。<br>まあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。</p>\n<h3 id=\"hexoとは？\"><a href=\"#hexoとは？\" class=\"headerlink\" title=\"hexoとは？\"></a>hexoとは？</h3><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>とは静的サイトジェネレーターです。<br>基本的にはマークダウンファイルを書くだけでブログを更新できます。<br>また、テーマなども複数ありかなり応用が効きそうです。<br>(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)</p>\n<h3 id=\"Github-Pagesについて\"><a href=\"#Github-Pagesについて\" class=\"headerlink\" title=\"Github Pagesについて\"></a>Github Pagesについて</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。<br>無料でWebページが作成出来るのでかなり便利です。<br>ただし、ページを公開するための制約が何個かあります。</p>\n<ol>\n<li>静的ファイルしか公開することができない</li>\n<li>masterブランチまたはgh-pagesブランチにあるファイルを公開する</li>\n</ol>\n<p>つまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。</p>\n<h2 id=\"デプロイをするときの問題点\"><a href=\"#デプロイをするときの問題点\" class=\"headerlink\" title=\"デプロイをするときの問題点\"></a>デプロイをするときの問題点</h2><p>実はhexoではマークダウンで書いた後に、<code>hexo generate</code>と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの <code>/docs</code> 以下をウェブサイトとして公開することができます。つまり、hexoの <code>_config.yaml</code> を以下の用に書き換えればいいわけです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Directory</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">docs</span>  <span class=\"comment\"># &lt;-- ここをdocsにする</span></span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">archives</span></span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br></pre></td></tr></table></figure>\n\n<p>それを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。</p>\n<p>しかし、僕のサイトのような<code>{username}.github.io</code>というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。</p>\n<p>したがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。</p>\n<h2 id=\"解決策を書く前に\"><a href=\"#解決策を書く前に\" class=\"headerlink\" title=\"解決策を書く前に\"></a>解決策を書く前に</h2><p>実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。<br><code>hexo deploy</code>とはhexoのウェブページをデプロイするための機能です。今回は <code>_config.yml</code> の該当箇所を以下のように直せば動かすことができます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;/&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>これを書いた後、 <code>hexo deploy</code>と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。</p>\n<p>おそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)</p>\n<h2 id=\"ではやっと解決策\"><a href=\"#ではやっと解決策\" class=\"headerlink\" title=\"ではやっと解決策\"></a>ではやっと解決策</h2><p>今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/github-pages.html\" target=\"_blank\" rel=\"noopener\">Hexo io: GitHub Pages</a></li>\n<li><a href=\"https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690\" target=\"_blank\" rel=\"noopener\">Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]</a></li>\n</ul>\n<p>ではやっと本題へ。</p>\n<p>今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで <code>hexo deploy</code>を実行するという単純なものです。</p>\n<p><code>hexo deploy</code>の設定については先程の <a href=\"#解決策を書く前に\"><code>hexo deploy</code>を使う</a>通りに <code>_config.yml</code> を変更してください。</p>\n<h3 id=\"Travis-CIの設定\"><a href=\"#Travis-CIの設定\" class=\"headerlink\" title=\"Travis CIの設定\"></a>Travis CIの設定</h3><p>Travis CIの設定については3つのステップがあります。</p>\n<ol>\n<li>masterブランチにプッシュするための公開鍵の用意</li>\n<li>travis CIで使うための秘密鍵の用意</li>\n<li>travis.ymlの設定</li>\n</ol>\n<p>これらを順に解説していきます。</p>\n<h4 id=\"masterブランチにプッシュするための公開鍵の用意\"><a href=\"#masterブランチにプッシュするための公開鍵の用意\" class=\"headerlink\" title=\"masterブランチにプッシュするための公開鍵の用意\"></a>masterブランチにプッシュするための公開鍵の用意</h4><p>まずはmasterブランチにプッシュするためのssh keyファイルを用意します。<br>以下のコマンドを {username}.github.ioディレクトリの下で実行してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -N &apos;&apos; -f deploy_key</span><br></pre></td></tr></table></figure>\n\n<p>これを実行することで、 <code>deploy_key</code>(秘密鍵)と <code>deploy_key.pub</code>(公開鍵)の2つができます。<br><strong>これらは間違ってコミットしないように <code>.gitignore</code>に登録しておきましょう。</strong><br>では、<code>deploy_key.pub</code>をGitHubに登録しましょう。</p>\n<p>まず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 <code>Deploy Keys</code>というタブがあると思います。そこへ行って、<code>add deploy key</code>というボタンをクリックします。このフォームへ先程の<code>deploy_key.pub</code>の中身を登録します。必ず <code>Allow write access</code>にチェックをつけてください。</p>\n<p>さあ、これで公開鍵の登録は終了しました。<br>次にTravisの方で秘密鍵を使うための設定を行っていきます。</p>\n<h3 id=\"Travis-CIで使うための秘密鍵の用意\"><a href=\"#Travis-CIで使うための秘密鍵の用意\" class=\"headerlink\" title=\"Travis CIで使うための秘密鍵の用意\"></a>Travis CIで使うための秘密鍵の用意</h3><p>まずはtravisのCLIを導入していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\"># Githubアカウントでログインする</span><br><span class=\"line\">$ travis login</span><br></pre></td></tr></table></figure>\n\n<p>次に、先程作成した秘密鍵を暗号化し、travisに設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch .travis.yml &amp;&amp; travis encrypt-file ./deploy_key --add</span><br></pre></td></tr></table></figure>\n\n<p>これを実行すると <code>deploy_key.enc</code>ファイルと <code>.travis.yml</code>が作成されているのが分かると思います。<br>次に <code>.travis.yml</code>ファイルの中を見ると以下のようなコードが挿入されていると思います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n\n<p>これで秘密鍵の設定は完了しました。<br>** <code>deploy_key.enc</code>ファイルをGitで管理するということを忘れないでください。**<br>.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。<br>では最後にtravisの設定をしていきましょう。</p>\n<h3 id=\"travis-ymlの設定\"><a href=\"#travis-ymlの設定\" class=\"headerlink\" title=\"travis.ymlの設定\"></a>travis.ymlの設定</h3><p>.travis.ymlの設定は以下の通りです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span> <span class=\"comment\">### ここは先程のコードです。</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">\"$(ssh-agent -s)\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">\"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<p>これらの簡単な解説をします。<br><code>branches:</code> はどのブランチでこのtravisを実行するかを設定しています。今回の場合は <code>deploy</code>ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。</p>\n<p>次に <code>before_install</code> についてです。このコードはsshキーの設定を行っています。最初の <code>openssl ....</code>は先程作成した <code>deploy_key.enc</code>を復号化するためのコマンドです。それ以下では復号した <code>deploy_key</code>をsshキーとして使う設定を行っています。<br><code>before_install</code>は以下の <code>script</code>の前に実行されます。</p>\n<p>最後に <code>script</code>についてです。といってもこれについては解説する意味もなさそうですね。笑<br>ただ、hemlにコンパイルを行い、それらをdeployするだけです。</p>\n<h2 id=\"自動デプロイしてみる\"><a href=\"#自動デプロイしてみる\" class=\"headerlink\" title=\"自動デプロイしてみる\"></a>自動デプロイしてみる</h2><p>それではここまでが終わったら、<code>deploy</code>ブランチにプッシュしてみましょう。<br>そうすると <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">travis</a>のページを確認するとCIが走っているのが確認出来ると思います。<br>もし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。</p>\n<p>もし、CIがうまくはしればmasterにデプロイが完了しているはずです。<br>お疲れさまです。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。<br>もし、読んでいる人の参考になればとても嬉しいです。</p>\n<h2 id=\"もしバグが起こった場合\"><a href=\"#もしバグが起こった場合\" class=\"headerlink\" title=\"もしバグが起こった場合\"></a>もしバグが起こった場合</h2><p>Travisで以下のようなエラーが起った場合についてです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iv undefined</span><br><span class=\"line\">The command &quot;openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d&quot; failed and exited with 1 during .</span><br></pre></td></tr></table></figure>\n\n<p>これについては<a href=\"https://github.com/travis-ci/travis.rb/issues/607\" target=\"_blank\" rel=\"noopener\">このissue</a>が参考になりました。<br>僕の場合の解決方法です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ travis encrypt-file ./deploy_key --pro</span><br></pre></td></tr></table></figure>\n\n<p>これを実行したときに出てくる <code>openssl ...</code> をtravis.ymlの同じ部分を置き換えて、新しくできた <code>deploy_key.enc</code> と一緒にプッシュしてみましょう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>せっかくなのでブログを1つくらい更新しようかなと思います。</p>\n<p>現在僕はGitHub Pagesとhexoを使ってページを公開しています。<br>まあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。</p>\n<h3 id=\"hexoとは？\"><a href=\"#hexoとは？\" class=\"headerlink\" title=\"hexoとは？\"></a>hexoとは？</h3><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>とは静的サイトジェネレーターです。<br>基本的にはマークダウンファイルを書くだけでブログを更新できます。<br>また、テーマなども複数ありかなり応用が効きそうです。<br>(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)</p>\n<h3 id=\"Github-Pagesについて\"><a href=\"#Github-Pagesについて\" class=\"headerlink\" title=\"Github Pagesについて\"></a>Github Pagesについて</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。<br>無料でWebページが作成出来るのでかなり便利です。<br>ただし、ページを公開するための制約が何個かあります。</p>\n<ol>\n<li>静的ファイルしか公開することができない</li>\n<li>masterブランチまたはgh-pagesブランチにあるファイルを公開する</li>\n</ol>\n<p>つまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。</p>\n<h2 id=\"デプロイをするときの問題点\"><a href=\"#デプロイをするときの問題点\" class=\"headerlink\" title=\"デプロイをするときの問題点\"></a>デプロイをするときの問題点</h2><p>実はhexoではマークダウンで書いた後に、<code>hexo generate</code>と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの <code>/docs</code> 以下をウェブサイトとして公開することができます。つまり、hexoの <code>_config.yaml</code> を以下の用に書き換えればいいわけです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Directory</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">docs</span>  <span class=\"comment\"># &lt;-- ここをdocsにする</span></span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">archives</span></span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br></pre></td></tr></table></figure>\n\n<p>それを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。</p>\n<p>しかし、僕のサイトのような<code>{username}.github.io</code>というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。</p>\n<p>したがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。</p>\n<h2 id=\"解決策を書く前に\"><a href=\"#解決策を書く前に\" class=\"headerlink\" title=\"解決策を書く前に\"></a>解決策を書く前に</h2><p>実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。<br><code>hexo deploy</code>とはhexoのウェブページをデプロイするための機能です。今回は <code>_config.yml</code> の該当箇所を以下のように直せば動かすことができます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;/&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>これを書いた後、 <code>hexo deploy</code>と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。</p>\n<p>おそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)</p>\n<h2 id=\"ではやっと解決策\"><a href=\"#ではやっと解決策\" class=\"headerlink\" title=\"ではやっと解決策\"></a>ではやっと解決策</h2><p>今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/github-pages.html\" target=\"_blank\" rel=\"noopener\">Hexo io: GitHub Pages</a></li>\n<li><a href=\"https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690\" target=\"_blank\" rel=\"noopener\">Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]</a></li>\n</ul>\n<p>ではやっと本題へ。</p>\n<p>今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで <code>hexo deploy</code>を実行するという単純なものです。</p>\n<p><code>hexo deploy</code>の設定については先程の <a href=\"#解決策を書く前に\"><code>hexo deploy</code>を使う</a>通りに <code>_config.yml</code> を変更してください。</p>\n<h3 id=\"Travis-CIの設定\"><a href=\"#Travis-CIの設定\" class=\"headerlink\" title=\"Travis CIの設定\"></a>Travis CIの設定</h3><p>Travis CIの設定については3つのステップがあります。</p>\n<ol>\n<li>masterブランチにプッシュするための公開鍵の用意</li>\n<li>travis CIで使うための秘密鍵の用意</li>\n<li>travis.ymlの設定</li>\n</ol>\n<p>これらを順に解説していきます。</p>\n<h4 id=\"masterブランチにプッシュするための公開鍵の用意\"><a href=\"#masterブランチにプッシュするための公開鍵の用意\" class=\"headerlink\" title=\"masterブランチにプッシュするための公開鍵の用意\"></a>masterブランチにプッシュするための公開鍵の用意</h4><p>まずはmasterブランチにプッシュするためのssh keyファイルを用意します。<br>以下のコマンドを {username}.github.ioディレクトリの下で実行してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -N &apos;&apos; -f deploy_key</span><br></pre></td></tr></table></figure>\n\n<p>これを実行することで、 <code>deploy_key</code>(秘密鍵)と <code>deploy_key.pub</code>(公開鍵)の2つができます。<br><strong>これらは間違ってコミットしないように <code>.gitignore</code>に登録しておきましょう。</strong><br>では、<code>deploy_key.pub</code>をGitHubに登録しましょう。</p>\n<p>まず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 <code>Deploy Keys</code>というタブがあると思います。そこへ行って、<code>add deploy key</code>というボタンをクリックします。このフォームへ先程の<code>deploy_key.pub</code>の中身を登録します。必ず <code>Allow write access</code>にチェックをつけてください。</p>\n<p>さあ、これで公開鍵の登録は終了しました。<br>次にTravisの方で秘密鍵を使うための設定を行っていきます。</p>\n<h3 id=\"Travis-CIで使うための秘密鍵の用意\"><a href=\"#Travis-CIで使うための秘密鍵の用意\" class=\"headerlink\" title=\"Travis CIで使うための秘密鍵の用意\"></a>Travis CIで使うための秘密鍵の用意</h3><p>まずはtravisのCLIを導入していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\"># Githubアカウントでログインする</span><br><span class=\"line\">$ travis login</span><br></pre></td></tr></table></figure>\n\n<p>次に、先程作成した秘密鍵を暗号化し、travisに設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch .travis.yml &amp;&amp; travis encrypt-file ./deploy_key --add</span><br></pre></td></tr></table></figure>\n\n<p>これを実行すると <code>deploy_key.enc</code>ファイルと <code>.travis.yml</code>が作成されているのが分かると思います。<br>次に <code>.travis.yml</code>ファイルの中を見ると以下のようなコードが挿入されていると思います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n\n<p>これで秘密鍵の設定は完了しました。<br>** <code>deploy_key.enc</code>ファイルをGitで管理するということを忘れないでください。**<br>.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。<br>では最後にtravisの設定をしていきましょう。</p>\n<h3 id=\"travis-ymlの設定\"><a href=\"#travis-ymlの設定\" class=\"headerlink\" title=\"travis.ymlの設定\"></a>travis.ymlの設定</h3><p>.travis.ymlの設定は以下の通りです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span> <span class=\"comment\">### ここは先程のコードです。</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">\"$(ssh-agent -s)\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">\"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<p>これらの簡単な解説をします。<br><code>branches:</code> はどのブランチでこのtravisを実行するかを設定しています。今回の場合は <code>deploy</code>ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。</p>\n<p>次に <code>before_install</code> についてです。このコードはsshキーの設定を行っています。最初の <code>openssl ....</code>は先程作成した <code>deploy_key.enc</code>を復号化するためのコマンドです。それ以下では復号した <code>deploy_key</code>をsshキーとして使う設定を行っています。<br><code>before_install</code>は以下の <code>script</code>の前に実行されます。</p>\n<p>最後に <code>script</code>についてです。といってもこれについては解説する意味もなさそうですね。笑<br>ただ、hemlにコンパイルを行い、それらをdeployするだけです。</p>\n<h2 id=\"自動デプロイしてみる\"><a href=\"#自動デプロイしてみる\" class=\"headerlink\" title=\"自動デプロイしてみる\"></a>自動デプロイしてみる</h2><p>それではここまでが終わったら、<code>deploy</code>ブランチにプッシュしてみましょう。<br>そうすると <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">travis</a>のページを確認するとCIが走っているのが確認出来ると思います。<br>もし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。</p>\n<p>もし、CIがうまくはしればmasterにデプロイが完了しているはずです。<br>お疲れさまです。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。<br>もし、読んでいる人の参考になればとても嬉しいです。</p>\n<h2 id=\"もしバグが起こった場合\"><a href=\"#もしバグが起こった場合\" class=\"headerlink\" title=\"もしバグが起こった場合\"></a>もしバグが起こった場合</h2><p>Travisで以下のようなエラーが起った場合についてです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iv undefined</span><br><span class=\"line\">The command &quot;openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d&quot; failed and exited with 1 during .</span><br></pre></td></tr></table></figure>\n\n<p>これについては<a href=\"https://github.com/travis-ci/travis.rb/issues/607\" target=\"_blank\" rel=\"noopener\">このissue</a>が参考になりました。<br>僕の場合の解決方法です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ travis encrypt-file ./deploy_key --pro</span><br></pre></td></tr></table></figure>\n\n<p>これを実行したときに出てくる <code>openssl ...</code> をtravis.ymlの同じ部分を置き換えて、新しくできた <code>deploy_key.enc</code> と一緒にプッシュしてみましょう。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck3oj34160000zqpgenpk4sf6","tag_id":"ck3oj341c0002zqpgbo1w40aw","_id":"ck3oj341g0005zqpg9d2qhoh6"},{"post_id":"ck3oj34160000zqpgenpk4sf6","tag_id":"ck3oj341e0003zqpg6x3k5yk9","_id":"ck3oj341g0006zqpg4r4mf45r"},{"post_id":"ck3oj341b0001zqpgcwy5e5hr","tag_id":"ck3oj341c0002zqpgbo1w40aw","_id":"ck3oj341g0007zqpggp99bzqg"},{"post_id":"ck3oj341t0008zqpgal1ehl7x","tag_id":"ck3oj341w000azqpge2rmbspa","_id":"ck3oj3420000ezqpg0lxaghfp"},{"post_id":"ck3oj341t0008zqpgal1ehl7x","tag_id":"ck3oj341z000czqpg6zejb1va","_id":"ck3oj3420000fzqpgcqg7fayr"},{"post_id":"ck3oj341x000bzqpg7ta97s67","tag_id":"ck3oj341z000dzqpg0gg78y3x","_id":"ck3oj3422000izqpg1vz4fyan"},{"post_id":"ck3oj341x000bzqpg7ta97s67","tag_id":"ck3oj3420000gzqpgdme43txy","_id":"ck3oj3422000jzqpgcyyzbg19"},{"post_id":"ck3oj341x000bzqpg7ta97s67","tag_id":"ck3oj3421000hzqpg4wh04yzt","_id":"ck3oj3422000kzqpg6obe9n27"}],"Tag":[{"name":"読書","_id":"ck3oj341c0002zqpgbo1w40aw"},{"name":"ライフハック","_id":"ck3oj341e0003zqpg6x3k5yk9"},{"name":"vim","_id":"ck3oj341w000azqpge2rmbspa"},{"name":"LSP","_id":"ck3oj341z000czqpg6zejb1va"},{"name":"hexo","_id":"ck3oj341z000dzqpg0gg78y3x"},{"name":"Github Pages","_id":"ck3oj3420000gzqpgdme43txy"},{"name":"travis","_id":"ck3oj3421000hzqpg4wh04yzt"}]}}