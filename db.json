{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/css/images/icon.jpg","path":"css/images/icon.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1572585125158},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1572585125126},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1572585125159},{"_id":"source/_posts/hello-world.md","hash":"38b094c615fce435b0b81d4e2db018e456586861","modified":1572601243757},{"_id":"source/_posts/hexo-setting.md","hash":"4243dfb9253202f4a4b294cb47f4def2ef4f71f1","modified":1572774627952},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1572585125155},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1572585125154},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1572585125156},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1572585125156},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1572585125155},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1572585125157},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1572585125157},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1572585125155},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1572585125156},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1572585125157},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1572585125157},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1572585125127},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1572585125128},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1572585125129},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1572585125128},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572585125136},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1572585125128},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572585125127},{"_id":"source/about/me.md","hash":"39b017732d7471b095393b275fa918dc284e6f1c","modified":1572775245213},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1572585125160},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1572585125154},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1572585125126},{"_id":"themes/landscape/_config.yml","hash":"1607bb04ed12aaeabd44418d3290eedefdb9ce87","modified":1572618528251},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1572585125137},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1572585125136},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1572585125134},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1572585125132},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1572585125132},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1572585125135},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1572585125134},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1572585125133},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1572585125132},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1572585125133},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1572585125133},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1572585125135},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1572585125135},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1572585125153},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1572585125146},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1572585125150},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572585125141},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572585125142},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1572585125137},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1572585125137},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1572585125138},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572585125141},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1572585125139},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572585125141},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1572585125139},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1572585125153},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1572585125140},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572585125139},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572585125140},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1572585125131},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1572585125130},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1572585125130},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1572585125145},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1572585125145},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1572585125150},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1572585125147},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1572585125148},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1572585125147},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1572585125149},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1572585125150},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1572585125148},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1572585125148},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1572585125151},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1572585125152},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1572585125152},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572585125142},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572585125144},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1572585125144},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1572585125143},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572585125143},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1572585125143},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1572585125131},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1572585125130},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1572585125131},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1572585125152},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1572585125151},{"_id":"source/css/images/banner.jpg","hash":"160f6d2d5bd235a2794667a0306020073ecf1a49","modified":1572618483107},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"160f6d2d5bd235a2794667a0306020073ecf1a49","modified":1572600614401},{"_id":"public/about/me.html","hash":"39d399b71117dc1b14d590f77887c96ea592a17c","modified":1572774348124},{"_id":"public/2019/11/01/hello-world/index.html","hash":"d040619788623b2778173e121e59e4c5dca0980b","modified":1572774348124},{"_id":"public/archives/index.html","hash":"4fb98224ff8092bbfa58d764c46d947f186456ec","modified":1572774348124},{"_id":"public/archives/2019/11/index.html","hash":"3ae26d07c86b18907c0e87b1437a747555b2e0c8","modified":1572774348124},{"_id":"public/archives/2019/index.html","hash":"067bf90a979603c92f8142857c4093b4f881265b","modified":1572774348124},{"_id":"public/index.html","hash":"d7707234d9f36894dd6b6b25ef4bb10a07f151d1","modified":1572774348124},{"_id":"public/tags/hexo/index.html","hash":"ea2b9c44f1e8b399c14de36ea91be23af7ed3e6d","modified":1572774348124},{"_id":"public/tags/Github-Pages/index.html","hash":"afb51d464e579f25b454f60b1f8805e784d56e69","modified":1572774348124},{"_id":"public/tags/travis/index.html","hash":"fb056dcd7870aa6d96a87f30670cf8a876adedfb","modified":1572774348124},{"_id":"public/2019/11/03/hexo-setting/index.html","hash":"4193ed092357892d3a93a467a93f85e602aba66b","modified":1572774348124},{"_id":"source/css/images/icon.jpg","hash":"4af05f42c713334692f9b9e73a81ee968ef4a338","modified":1572775261094}],"Category":[],"Data":[],"Page":[{"title":"About me","date":"2019-11-01T08:55:37.000Z","_content":"\n<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n**名前**\n北川 亮\n\n**所属**\n京都大学大学院修士1年 情報学研究科 神田研究室所属\n\n**趣味**\n読書・プログラミング・ドラム\n\n**好きな言語**\nGolang\n最近はRustを勉強中\n\n<br style=\"clear:left;\">\n\n\n**Github**\nhttps://github.com/kitagry\n\n**Twitter**\nhttps://twitter.com/kitagry\n","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2019-11-01 17:55:37\n---\n\n<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n**名前**\n北川 亮\n\n**所属**\n京都大学大学院修士1年 情報学研究科 神田研究室所属\n\n**趣味**\n読書・プログラミング・ドラム\n\n**好きな言語**\nGolang\n最近はRustを勉強中\n\n<br style=\"clear:left;\">\n\n\n**Github**\nhttps://github.com/kitagry\n\n**Twitter**\nhttps://twitter.com/kitagry\n","updated":"2019-11-03T10:00:45.213Z","path":"about/me.html","_id":"ck2ir9efx000106hs5ane6abr","comments":1,"layout":"page","content":"<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n<p><strong>名前</strong><br>北川 亮</p>\n<p><strong>所属</strong><br>京都大学大学院修士1年 情報学研究科 神田研究室所属</p>\n<p><strong>趣味</strong><br>読書・プログラミング・ドラム</p>\n<p><strong>好きな言語</strong><br>Golang<br>最近はRustを勉強中</p>\n<br style=\"clear:left;\">\n\n\n<p><strong>Github</strong><br><a href=\"https://github.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry</a></p>\n<p><strong>Twitter</strong><br><a href=\"https://twitter.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://twitter.com/kitagry</a></p>\n","site":{"data":{}},"excerpt":"","more":"<br />\n\n<img src=\"/css/images/icon.jpg\" align=\"left\" style=\"margin-right: 10px;\">\n\n<p><strong>名前</strong><br>北川 亮</p>\n<p><strong>所属</strong><br>京都大学大学院修士1年 情報学研究科 神田研究室所属</p>\n<p><strong>趣味</strong><br>読書・プログラミング・ドラム</p>\n<p><strong>好きな言語</strong><br>Golang<br>最近はRustを勉強中</p>\n<br style=\"clear:left;\">\n\n\n<p><strong>Github</strong><br><a href=\"https://github.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://github.com/kitagry</a></p>\n<p><strong>Twitter</strong><br><a href=\"https://twitter.com/kitagry\" target=\"_blank\" rel=\"noopener\">https://twitter.com/kitagry</a></p>\n"}],"Post":[{"title":"ブログ作ってみた","_content":"\n[Hexo](https://hexo.io/)を使ってブログを開設してみました。\n正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。\n","source":"_posts/hello-world.md","raw":"---\ntitle: ブログ作ってみた\n---\n\n[Hexo](https://hexo.io/)を使ってブログを開設してみました。\n正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。\n","slug":"hello-world","published":1,"date":"2019-11-01T09:40:43.757Z","updated":"2019-11-01T09:40:43.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ir9efn000006hsgxzv1jtu","content":"<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>を使ってブログを開設してみました。<br>正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>を使ってブログを開設してみました。<br>正直ちゃんとやるかは微妙ですが、頑張っていきたいと思います。</p>\n"},{"title":"hexoをGitHub Pagesで使うための設定","date":"2019-11-03T08:15:43.000Z","_content":"\nせっかくなのでブログを1つくらい更新しようかなと思います。\n\n現在僕はGitHub Pagesとhexoを使ってページを公開しています。\nまあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。\n\n### hexoとは？\n\n[hexo](https://hexo.io)とは静的サイトジェネレーターです。\n基本的にはマークダウンファイルを書くだけでブログを更新できます。\nまた、テーマなども複数ありかなり応用が効きそうです。\n(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)\n\n### Github Pagesについて\n\n[Github Pages](https://pages.github.com/)とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。\n無料でWebページが作成出来るのでかなり便利です。\nただし、ページを公開するための制約が何個かあります。\n\n1. 静的ファイルしか公開することができない\n1. masterブランチまたはgh-pagesブランチにあるファイルを公開する\n\nつまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。\n\n## デプロイをするときの問題点\n\n実はhexoではマークダウンで書いた後に、`hexo generate`と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの `/docs` 以下をウェブサイトとして公開することができます。つまり、hexoの `_config.yaml` を以下の用に書き換えればいいわけです。\n\n```yaml\n# Directory\nsource_dir: source\npublic_dir: docs  # <-- ここをdocsにする\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n```\n\nそれを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。\n\n\nしかし、僕のサイトのような`{username}.github.io`というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。\n\nしたがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。\n\n\n## 解決策を書く前に\n\n実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。\n`hexo deploy`とはhexoのウェブページをデプロイするための機能です。今回は `_config.yml` の該当箇所を以下のように直せば動かすことができます。\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:{your github name}/{your github name}.github.io.git\n  branch: master\n```\n\nこれを書いた後、 `hexo deploy`と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。\n\nおそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)\n\n## ではやっと解決策\n\n今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。\n\n- [Hexo io: GitHub Pages](https://hexo.io/docs/github-pages.html)\n- [Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]](https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690)\n\nではやっと本題へ。\n\n今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで `hexo deploy`を実行するという単純なものです。\n\n`hexo deploy`の設定については先程の [`hexo deploy`を使う](#解決策を書く前に)通りに `_config.yml` を変更してください。\n\n### Travis CIの設定\n\nTravis CIの設定については3つのステップがあります。\n\n1. masterブランチにプッシュするための公開鍵の用意\n1. travis CIで使うための秘密鍵の用意\n1. travis.ymlの設定\n\nこれらを順に解説していきます。\n\n#### masterブランチにプッシュするための公開鍵の用意\n\nまずはmasterブランチにプッシュするためのssh keyファイルを用意します。\n以下のコマンドを {username}.github.ioディレクトリの下で実行してください。\n\n```\n$ ssh-keygen -t rsa -N '' -f deploy_key\n```\n\nこれを実行することで、 `deploy_key`(秘密鍵)と `deploy_key.pub`(公開鍵)の2つができます。\n**これらは間違ってコミットしないように `.gitignore`に登録しておきましょう。**\nでは、`deploy_key.pub`をGitHubに登録しましょう。\n\nまず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 `Deploy Keys`というタブがあると思います。そこへ行って、`add deploy key`というボタンをクリックします。このフォームへ先程の`deploy_key.pub`の中身を登録します。必ず `Allow write access`にチェックをつけてください。\n\nさあ、これで公開鍵の登録は終了しました。\n次にTravisの方で秘密鍵を使うための設定を行っていきます。\n\n### Travis CIで使うための秘密鍵の用意\n\nまずはtravisのCLIを導入していきます。\n\n```\n$ gem install travis\n\n# Githubアカウントでログインする\n$ travis login\n```\n\n次に、先程作成した秘密鍵を暗号化し、travisに設定します。\n\n```\n$ touch .travis.yml && travis encrypt-file ./deploy_key --add\n```\n\nこれを実行すると `deploy_key.enc`ファイルと `.travis.yml`が作成されているのが分かると思います。\n次に `.travis.yml`ファイルの中を見ると以下のようなコードが挿入されていると思います。\n\n```yaml\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d\n```\n\nこれで秘密鍵の設定は完了しました。\n** `deploy_key.enc`ファイルをGitで管理するということを忘れないでください。**\n.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。\nでは最後にtravisの設定をしていきましょう。\n\n### travis.ymlの設定\n\n.travis.ymlの設定は以下の通りです。\n\n```yaml\nsudo: false\nlanguage: node_js\nnode_js:\n- 12\ncache: npm\nbranches:\n  only:\n  - deploy\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d ### ここは先程のコードです。\n- eval \"$(ssh-agent -s)\"\n- chmod 600 ./deploy_key\n- echo -e \"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- ssh-add ./deploy_key\nscript:\n- hexo generate\n- hexo deploy\n```\n\nこれらの簡単な解説をします。\n`branches:` はどのブランチでこのtravisを実行するかを設定しています。今回の場合は `deploy`ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。\n\n次に `before_install` についてです。このコードはsshキーの設定を行っています。最初の `openssl ....`は先程作成した `deploy_key.enc`を復号化するためのコマンドです。それ以下では復号した `deploy_key`をsshキーとして使う設定を行っています。\n`before_install`は以下の `script`の前に実行されます。\n\n最後に `script`についてです。といってもこれについては解説する意味もなさそうですね。笑\nただ、hemlにコンパイルを行い、それらをdeployするだけです。\n\n\n## 自動デプロイしてみる\n\nそれではここまでが終わったら、`deploy`ブランチにプッシュしてみましょう。\nそうすると [travis](https://travis-ci.com/)のページを確認するとCIが走っているのが確認出来ると思います。\nもし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。\n\nもし、CIがうまくはしればmasterにデプロイが完了しているはずです。\nお疲れさまです。\n\n\n## 最後に\n\n今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。\nもし、読んでいる人の参考になればとても嬉しいです。\n\n\n## もしバグが起こった場合\n\nTravisで以下のようなエラーが起った場合についてです。\n\n```\niv undefined\nThe command \"openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d\" failed and exited with 1 during .\n```\n\nこれについては[このissue](https://github.com/travis-ci/travis.rb/issues/607)が参考になりました。\n僕の場合の解決方法です。\n\n```\n$ travis encrypt-file ./deploy_key --pro\n```\n\nこれを実行したときに出てくる `openssl ...` をtravis.ymlの同じ部分を置き換えて、新しくできた `deploy_key.enc` と一緒にプッシュしてみましょう。\n","source":"_posts/hexo-setting.md","raw":"---\ntitle: hexoをGitHub Pagesで使うための設定\ndate: 2019-11-03 17:15:43\ntags:\n- hexo\n- Github Pages\n- travis\n---\n\nせっかくなのでブログを1つくらい更新しようかなと思います。\n\n現在僕はGitHub Pagesとhexoを使ってページを公開しています。\nまあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。\n\n### hexoとは？\n\n[hexo](https://hexo.io)とは静的サイトジェネレーターです。\n基本的にはマークダウンファイルを書くだけでブログを更新できます。\nまた、テーマなども複数ありかなり応用が効きそうです。\n(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)\n\n### Github Pagesについて\n\n[Github Pages](https://pages.github.com/)とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。\n無料でWebページが作成出来るのでかなり便利です。\nただし、ページを公開するための制約が何個かあります。\n\n1. 静的ファイルしか公開することができない\n1. masterブランチまたはgh-pagesブランチにあるファイルを公開する\n\nつまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。\n\n## デプロイをするときの問題点\n\n実はhexoではマークダウンで書いた後に、`hexo generate`と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの `/docs` 以下をウェブサイトとして公開することができます。つまり、hexoの `_config.yaml` を以下の用に書き換えればいいわけです。\n\n```yaml\n# Directory\nsource_dir: source\npublic_dir: docs  # <-- ここをdocsにする\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n```\n\nそれを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。\n\n\nしかし、僕のサイトのような`{username}.github.io`というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。\n\nしたがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。\n\n\n## 解決策を書く前に\n\n実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。\n`hexo deploy`とはhexoのウェブページをデプロイするための機能です。今回は `_config.yml` の該当箇所を以下のように直せば動かすことができます。\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:{your github name}/{your github name}.github.io.git\n  branch: master\n```\n\nこれを書いた後、 `hexo deploy`と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。\n\nおそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)\n\n## ではやっと解決策\n\n今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。\n\n- [Hexo io: GitHub Pages](https://hexo.io/docs/github-pages.html)\n- [Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]](https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690)\n\nではやっと本題へ。\n\n今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで `hexo deploy`を実行するという単純なものです。\n\n`hexo deploy`の設定については先程の [`hexo deploy`を使う](#解決策を書く前に)通りに `_config.yml` を変更してください。\n\n### Travis CIの設定\n\nTravis CIの設定については3つのステップがあります。\n\n1. masterブランチにプッシュするための公開鍵の用意\n1. travis CIで使うための秘密鍵の用意\n1. travis.ymlの設定\n\nこれらを順に解説していきます。\n\n#### masterブランチにプッシュするための公開鍵の用意\n\nまずはmasterブランチにプッシュするためのssh keyファイルを用意します。\n以下のコマンドを {username}.github.ioディレクトリの下で実行してください。\n\n```\n$ ssh-keygen -t rsa -N '' -f deploy_key\n```\n\nこれを実行することで、 `deploy_key`(秘密鍵)と `deploy_key.pub`(公開鍵)の2つができます。\n**これらは間違ってコミットしないように `.gitignore`に登録しておきましょう。**\nでは、`deploy_key.pub`をGitHubに登録しましょう。\n\nまず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 `Deploy Keys`というタブがあると思います。そこへ行って、`add deploy key`というボタンをクリックします。このフォームへ先程の`deploy_key.pub`の中身を登録します。必ず `Allow write access`にチェックをつけてください。\n\nさあ、これで公開鍵の登録は終了しました。\n次にTravisの方で秘密鍵を使うための設定を行っていきます。\n\n### Travis CIで使うための秘密鍵の用意\n\nまずはtravisのCLIを導入していきます。\n\n```\n$ gem install travis\n\n# Githubアカウントでログインする\n$ travis login\n```\n\n次に、先程作成した秘密鍵を暗号化し、travisに設定します。\n\n```\n$ touch .travis.yml && travis encrypt-file ./deploy_key --add\n```\n\nこれを実行すると `deploy_key.enc`ファイルと `.travis.yml`が作成されているのが分かると思います。\n次に `.travis.yml`ファイルの中を見ると以下のようなコードが挿入されていると思います。\n\n```yaml\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d\n```\n\nこれで秘密鍵の設定は完了しました。\n** `deploy_key.enc`ファイルをGitで管理するということを忘れないでください。**\n.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。\nでは最後にtravisの設定をしていきましょう。\n\n### travis.ymlの設定\n\n.travis.ymlの設定は以下の通りです。\n\n```yaml\nsudo: false\nlanguage: node_js\nnode_js:\n- 12\ncache: npm\nbranches:\n  only:\n  - deploy\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in deploy_key.enc -out ./deploy_key -d ### ここは先程のコードです。\n- eval \"$(ssh-agent -s)\"\n- chmod 600 ./deploy_key\n- echo -e \"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- ssh-add ./deploy_key\nscript:\n- hexo generate\n- hexo deploy\n```\n\nこれらの簡単な解説をします。\n`branches:` はどのブランチでこのtravisを実行するかを設定しています。今回の場合は `deploy`ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。\n\n次に `before_install` についてです。このコードはsshキーの設定を行っています。最初の `openssl ....`は先程作成した `deploy_key.enc`を復号化するためのコマンドです。それ以下では復号した `deploy_key`をsshキーとして使う設定を行っています。\n`before_install`は以下の `script`の前に実行されます。\n\n最後に `script`についてです。といってもこれについては解説する意味もなさそうですね。笑\nただ、hemlにコンパイルを行い、それらをdeployするだけです。\n\n\n## 自動デプロイしてみる\n\nそれではここまでが終わったら、`deploy`ブランチにプッシュしてみましょう。\nそうすると [travis](https://travis-ci.com/)のページを確認するとCIが走っているのが確認出来ると思います。\nもし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。\n\nもし、CIがうまくはしればmasterにデプロイが完了しているはずです。\nお疲れさまです。\n\n\n## 最後に\n\n今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。\nもし、読んでいる人の参考になればとても嬉しいです。\n\n\n## もしバグが起こった場合\n\nTravisで以下のようなエラーが起った場合についてです。\n\n```\niv undefined\nThe command \"openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d\" failed and exited with 1 during .\n```\n\nこれについては[このissue](https://github.com/travis-ci/travis.rb/issues/607)が参考になりました。\n僕の場合の解決方法です。\n\n```\n$ travis encrypt-file ./deploy_key --pro\n```\n\nこれを実行したときに出てくる `openssl ...` をtravis.ymlの同じ部分を置き換えて、新しくできた `deploy_key.enc` と一緒にプッシュしてみましょう。\n","slug":"hexo-setting","published":1,"updated":"2019-11-03T09:50:27.952Z","_id":"ck2ir9efy000206hs976q7pxi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>せっかくなのでブログを1つくらい更新しようかなと思います。</p>\n<p>現在僕はGitHub Pagesとhexoを使ってページを公開しています。<br>まあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。</p>\n<h3 id=\"hexoとは？\"><a href=\"#hexoとは？\" class=\"headerlink\" title=\"hexoとは？\"></a>hexoとは？</h3><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>とは静的サイトジェネレーターです。<br>基本的にはマークダウンファイルを書くだけでブログを更新できます。<br>また、テーマなども複数ありかなり応用が効きそうです。<br>(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)</p>\n<h3 id=\"Github-Pagesについて\"><a href=\"#Github-Pagesについて\" class=\"headerlink\" title=\"Github Pagesについて\"></a>Github Pagesについて</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。<br>無料でWebページが作成出来るのでかなり便利です。<br>ただし、ページを公開するための制約が何個かあります。</p>\n<ol>\n<li>静的ファイルしか公開することができない</li>\n<li>masterブランチまたはgh-pagesブランチにあるファイルを公開する</li>\n</ol>\n<p>つまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。</p>\n<h2 id=\"デプロイをするときの問題点\"><a href=\"#デプロイをするときの問題点\" class=\"headerlink\" title=\"デプロイをするときの問題点\"></a>デプロイをするときの問題点</h2><p>実はhexoではマークダウンで書いた後に、<code>hexo generate</code>と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの <code>/docs</code> 以下をウェブサイトとして公開することができます。つまり、hexoの <code>_config.yaml</code> を以下の用に書き換えればいいわけです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Directory</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">docs</span>  <span class=\"comment\"># &lt;-- ここをdocsにする</span></span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">archives</span></span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br></pre></td></tr></table></figure>\n\n<p>それを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。</p>\n<p>しかし、僕のサイトのような<code>{username}.github.io</code>というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。</p>\n<p>したがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。</p>\n<h2 id=\"解決策を書く前に\"><a href=\"#解決策を書く前に\" class=\"headerlink\" title=\"解決策を書く前に\"></a>解決策を書く前に</h2><p>実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。<br><code>hexo deploy</code>とはhexoのウェブページをデプロイするための機能です。今回は <code>_config.yml</code> の該当箇所を以下のように直せば動かすことができます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;/&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>これを書いた後、 <code>hexo deploy</code>と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。</p>\n<p>おそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)</p>\n<h2 id=\"ではやっと解決策\"><a href=\"#ではやっと解決策\" class=\"headerlink\" title=\"ではやっと解決策\"></a>ではやっと解決策</h2><p>今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/github-pages.html\" target=\"_blank\" rel=\"noopener\">Hexo io: GitHub Pages</a></li>\n<li><a href=\"https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690\" target=\"_blank\" rel=\"noopener\">Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]</a></li>\n</ul>\n<p>ではやっと本題へ。</p>\n<p>今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで <code>hexo deploy</code>を実行するという単純なものです。</p>\n<p><code>hexo deploy</code>の設定については先程の <a href=\"#解決策を書く前に\"><code>hexo deploy</code>を使う</a>通りに <code>_config.yml</code> を変更してください。</p>\n<h3 id=\"Travis-CIの設定\"><a href=\"#Travis-CIの設定\" class=\"headerlink\" title=\"Travis CIの設定\"></a>Travis CIの設定</h3><p>Travis CIの設定については3つのステップがあります。</p>\n<ol>\n<li>masterブランチにプッシュするための公開鍵の用意</li>\n<li>travis CIで使うための秘密鍵の用意</li>\n<li>travis.ymlの設定</li>\n</ol>\n<p>これらを順に解説していきます。</p>\n<h4 id=\"masterブランチにプッシュするための公開鍵の用意\"><a href=\"#masterブランチにプッシュするための公開鍵の用意\" class=\"headerlink\" title=\"masterブランチにプッシュするための公開鍵の用意\"></a>masterブランチにプッシュするための公開鍵の用意</h4><p>まずはmasterブランチにプッシュするためのssh keyファイルを用意します。<br>以下のコマンドを {username}.github.ioディレクトリの下で実行してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -N &apos;&apos; -f deploy_key</span><br></pre></td></tr></table></figure>\n\n<p>これを実行することで、 <code>deploy_key</code>(秘密鍵)と <code>deploy_key.pub</code>(公開鍵)の2つができます。<br><strong>これらは間違ってコミットしないように <code>.gitignore</code>に登録しておきましょう。</strong><br>では、<code>deploy_key.pub</code>をGitHubに登録しましょう。</p>\n<p>まず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 <code>Deploy Keys</code>というタブがあると思います。そこへ行って、<code>add deploy key</code>というボタンをクリックします。このフォームへ先程の<code>deploy_key.pub</code>の中身を登録します。必ず <code>Allow write access</code>にチェックをつけてください。</p>\n<p>さあ、これで公開鍵の登録は終了しました。<br>次にTravisの方で秘密鍵を使うための設定を行っていきます。</p>\n<h3 id=\"Travis-CIで使うための秘密鍵の用意\"><a href=\"#Travis-CIで使うための秘密鍵の用意\" class=\"headerlink\" title=\"Travis CIで使うための秘密鍵の用意\"></a>Travis CIで使うための秘密鍵の用意</h3><p>まずはtravisのCLIを導入していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\"># Githubアカウントでログインする</span><br><span class=\"line\">$ travis login</span><br></pre></td></tr></table></figure>\n\n<p>次に、先程作成した秘密鍵を暗号化し、travisに設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch .travis.yml &amp;&amp; travis encrypt-file ./deploy_key --add</span><br></pre></td></tr></table></figure>\n\n<p>これを実行すると <code>deploy_key.enc</code>ファイルと <code>.travis.yml</code>が作成されているのが分かると思います。<br>次に <code>.travis.yml</code>ファイルの中を見ると以下のようなコードが挿入されていると思います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n\n<p>これで秘密鍵の設定は完了しました。<br>** <code>deploy_key.enc</code>ファイルをGitで管理するということを忘れないでください。**<br>.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。<br>では最後にtravisの設定をしていきましょう。</p>\n<h3 id=\"travis-ymlの設定\"><a href=\"#travis-ymlの設定\" class=\"headerlink\" title=\"travis.ymlの設定\"></a>travis.ymlの設定</h3><p>.travis.ymlの設定は以下の通りです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span> <span class=\"comment\">### ここは先程のコードです。</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">\"$(ssh-agent -s)\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">\"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<p>これらの簡単な解説をします。<br><code>branches:</code> はどのブランチでこのtravisを実行するかを設定しています。今回の場合は <code>deploy</code>ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。</p>\n<p>次に <code>before_install</code> についてです。このコードはsshキーの設定を行っています。最初の <code>openssl ....</code>は先程作成した <code>deploy_key.enc</code>を復号化するためのコマンドです。それ以下では復号した <code>deploy_key</code>をsshキーとして使う設定を行っています。<br><code>before_install</code>は以下の <code>script</code>の前に実行されます。</p>\n<p>最後に <code>script</code>についてです。といってもこれについては解説する意味もなさそうですね。笑<br>ただ、hemlにコンパイルを行い、それらをdeployするだけです。</p>\n<h2 id=\"自動デプロイしてみる\"><a href=\"#自動デプロイしてみる\" class=\"headerlink\" title=\"自動デプロイしてみる\"></a>自動デプロイしてみる</h2><p>それではここまでが終わったら、<code>deploy</code>ブランチにプッシュしてみましょう。<br>そうすると <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">travis</a>のページを確認するとCIが走っているのが確認出来ると思います。<br>もし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。</p>\n<p>もし、CIがうまくはしればmasterにデプロイが完了しているはずです。<br>お疲れさまです。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。<br>もし、読んでいる人の参考になればとても嬉しいです。</p>\n<h2 id=\"もしバグが起こった場合\"><a href=\"#もしバグが起こった場合\" class=\"headerlink\" title=\"もしバグが起こった場合\"></a>もしバグが起こった場合</h2><p>Travisで以下のようなエラーが起った場合についてです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iv undefined</span><br><span class=\"line\">The command &quot;openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d&quot; failed and exited with 1 during .</span><br></pre></td></tr></table></figure>\n\n<p>これについては<a href=\"https://github.com/travis-ci/travis.rb/issues/607\" target=\"_blank\" rel=\"noopener\">このissue</a>が参考になりました。<br>僕の場合の解決方法です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ travis encrypt-file ./deploy_key --pro</span><br></pre></td></tr></table></figure>\n\n<p>これを実行したときに出てくる <code>openssl ...</code> をtravis.ymlの同じ部分を置き換えて、新しくできた <code>deploy_key.enc</code> と一緒にプッシュしてみましょう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>せっかくなのでブログを1つくらい更新しようかなと思います。</p>\n<p>現在僕はGitHub Pagesとhexoを使ってページを公開しています。<br>まあ、探せばやり方はいくらでもあると思うのですが、意外と検索しても出てこなかったので僕の設定の備忘録として残しておきます。</p>\n<h3 id=\"hexoとは？\"><a href=\"#hexoとは？\" class=\"headerlink\" title=\"hexoとは？\"></a>hexoとは？</h3><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>とは静的サイトジェネレーターです。<br>基本的にはマークダウンファイルを書くだけでブログを更新できます。<br>また、テーマなども複数ありかなり応用が効きそうです。<br>(僕自身は現在hexo3日目なので、あまり良くわかっていませんが。。)</p>\n<h3 id=\"Github-Pagesについて\"><a href=\"#Github-Pagesについて\" class=\"headerlink\" title=\"Github Pagesについて\"></a>Github Pagesについて</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>とはGithubにプッシュするだけでウェブサイトを表示してくれるサービスです。<br>無料でWebページが作成出来るのでかなり便利です。<br>ただし、ページを公開するための制約が何個かあります。</p>\n<ol>\n<li>静的ファイルしか公開することができない</li>\n<li>masterブランチまたはgh-pagesブランチにあるファイルを公開する</li>\n</ol>\n<p>つまり、静的ファイルを公開する場合には、サーバーやドメインを借りるという手間を削減出来るのでかなり良いと思います。</p>\n<h2 id=\"デプロイをするときの問題点\"><a href=\"#デプロイをするときの問題点\" class=\"headerlink\" title=\"デプロイをするときの問題点\"></a>デプロイをするときの問題点</h2><p>実はhexoではマークダウンで書いた後に、<code>hexo generate</code>と実行することで静的ファイルを子ディレクトリの中に作成します。そして、多くのGithub Pagesはmasterブランチの <code>/docs</code> 以下をウェブサイトとして公開することができます。つまり、hexoの <code>_config.yaml</code> を以下の用に書き換えればいいわけです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Directory</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">docs</span>  <span class=\"comment\"># &lt;-- ここをdocsにする</span></span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">archives</span></span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br></pre></td></tr></table></figure>\n\n<p>それを masterブランチかgh-pagesブランチにプッシュして、設定で変更すればそのまま公開することができます。</p>\n<p>しかし、僕のサイトのような<code>{username}.github.io</code>というリポジトリでは上の方法が使えません。何故か、先程のようなリポジトリ名ではmasterブランチに直接静的ファイルを置かないとGithub Pagesを使えないらしいのです。</p>\n<p>したがって、僕はこの理不尽な仕様に対応するためにちょっとしたコードを書きました。このときに得た知見をブログで共有しようかなと思います。もし、hexoとGithub Pagesで自分のサイトを運用したいなという人がいれば、参考にしていただけると幸いです。</p>\n<h2 id=\"解決策を書く前に\"><a href=\"#解決策を書く前に\" class=\"headerlink\" title=\"解決策を書く前に\"></a>解決策を書く前に</h2><p>実は上の仕様は以下の簡単なステップで回避することができます。しかし以下の方法には少しだけ欠点があります。<br><code>hexo deploy</code>とはhexoのウェブページをデプロイするための機能です。今回は <code>_config.yml</code> の該当箇所を以下のように直せば動かすことができます。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;/&#123;your</span> <span class=\"string\">github</span> <span class=\"string\">name&#125;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>これを書いた後、 <code>hexo deploy</code>と入力することで、Githubのmasterブランチに静的ファイルをプッシュしてくれます。この問題点としては、つまりマークダウンファイルなどのhexoに関係する設定ファイルをGitに残すことができないということです。僕としてはこれは結構辛い問題で、hexoの設定ファイルのバックアップが取れないのでもしものときに設定ファイルを引き継ぐことができません。</p>\n<p>おそらく賢い人なら「じゃあ、masterブランチにdeployをしておいて、他のブランチでバックアップを取っておけばいいじゃん」ってなると思います。そうです。つまりウェブページを公開する用とソースコードを管理する用のブランチを分けてしまおうというわけです。これなら、バックアップも取れます。しかし、これだとバックアップとデプロイをいちいちやらないと行けなくなります。これは結構面倒でデプロイを忘れたりしてしまうことが頻発してしまいそうです。そこで、僕はバックアップをしたら自動でデプロイをするような仕組みを作成しました。(無料です。)</p>\n<h2 id=\"ではやっと解決策\"><a href=\"#ではやっと解決策\" class=\"headerlink\" title=\"ではやっと解決策\"></a>ではやっと解決策</h2><p>今回のやり方は以下の記事を参考にしました。僕の説明が不十分だと感じたら以下の記事を見てみてください。</p>\n<ul>\n<li><a href=\"https://hexo.io/docs/github-pages.html\" target=\"_blank\" rel=\"noopener\">Hexo io: GitHub Pages</a></li>\n<li><a href=\"https://qiita.com/koyayashi/items/13d4ac3a4d84d40b4690\" target=\"_blank\" rel=\"noopener\">Travis-CIの自動デプロイでSSHを実行する方法 [翻訳]</a></li>\n</ul>\n<p>ではやっと本題へ。</p>\n<p>今回の方針としては、masterブランチとは別に deployブランチというものを用意してそのブランチへプッシュされたら、Travis CIで <code>hexo deploy</code>を実行するという単純なものです。</p>\n<p><code>hexo deploy</code>の設定については先程の <a href=\"#解決策を書く前に\"><code>hexo deploy</code>を使う</a>通りに <code>_config.yml</code> を変更してください。</p>\n<h3 id=\"Travis-CIの設定\"><a href=\"#Travis-CIの設定\" class=\"headerlink\" title=\"Travis CIの設定\"></a>Travis CIの設定</h3><p>Travis CIの設定については3つのステップがあります。</p>\n<ol>\n<li>masterブランチにプッシュするための公開鍵の用意</li>\n<li>travis CIで使うための秘密鍵の用意</li>\n<li>travis.ymlの設定</li>\n</ol>\n<p>これらを順に解説していきます。</p>\n<h4 id=\"masterブランチにプッシュするための公開鍵の用意\"><a href=\"#masterブランチにプッシュするための公開鍵の用意\" class=\"headerlink\" title=\"masterブランチにプッシュするための公開鍵の用意\"></a>masterブランチにプッシュするための公開鍵の用意</h4><p>まずはmasterブランチにプッシュするためのssh keyファイルを用意します。<br>以下のコマンドを {username}.github.ioディレクトリの下で実行してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -N &apos;&apos; -f deploy_key</span><br></pre></td></tr></table></figure>\n\n<p>これを実行することで、 <code>deploy_key</code>(秘密鍵)と <code>deploy_key.pub</code>(公開鍵)の2つができます。<br><strong>これらは間違ってコミットしないように <code>.gitignore</code>に登録しておきましょう。</strong><br>では、<code>deploy_key.pub</code>をGitHubに登録しましょう。</p>\n<p>まず、GitHubの{username}.github.ioの設定ページへ行ってください。そこに、 <code>Deploy Keys</code>というタブがあると思います。そこへ行って、<code>add deploy key</code>というボタンをクリックします。このフォームへ先程の<code>deploy_key.pub</code>の中身を登録します。必ず <code>Allow write access</code>にチェックをつけてください。</p>\n<p>さあ、これで公開鍵の登録は終了しました。<br>次にTravisの方で秘密鍵を使うための設定を行っていきます。</p>\n<h3 id=\"Travis-CIで使うための秘密鍵の用意\"><a href=\"#Travis-CIで使うための秘密鍵の用意\" class=\"headerlink\" title=\"Travis CIで使うための秘密鍵の用意\"></a>Travis CIで使うための秘密鍵の用意</h3><p>まずはtravisのCLIを導入していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\"># Githubアカウントでログインする</span><br><span class=\"line\">$ travis login</span><br></pre></td></tr></table></figure>\n\n<p>次に、先程作成した秘密鍵を暗号化し、travisに設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch .travis.yml &amp;&amp; travis encrypt-file ./deploy_key --add</span><br></pre></td></tr></table></figure>\n\n<p>これを実行すると <code>deploy_key.enc</code>ファイルと <code>.travis.yml</code>が作成されているのが分かると思います。<br>次に <code>.travis.yml</code>ファイルの中を見ると以下のようなコードが挿入されていると思います。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n\n<p>これで秘密鍵の設定は完了しました。<br>** <code>deploy_key.enc</code>ファイルをGitで管理するということを忘れないでください。**<br>.encファイルは暗号化されているのでGithubにプッシュしても大丈夫です。<br>では最後にtravisの設定をしていきましょう。</p>\n<h3 id=\"travis-ymlの設定\"><a href=\"#travis-ymlの設定\" class=\"headerlink\" title=\"travis.ymlの設定\"></a>travis.ymlの設定</h3><p>.travis.ymlの設定は以下の通りです。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_77965d5bdd4d_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_77965d5bdd4d_iv</span></span><br><span class=\"line\">  <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">./deploy_key</span> <span class=\"string\">-d</span> <span class=\"comment\">### ここは先程のコードです。</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">\"$(ssh-agent -s)\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">\"Host $SERVER_IP_ADDRESS\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<p>これらの簡単な解説をします。<br><code>branches:</code> はどのブランチでこのtravisを実行するかを設定しています。今回の場合は <code>deploy</code>ブランチにプッシュされた場合にのみmasterへデプロイするという宣言を行っています。</p>\n<p>次に <code>before_install</code> についてです。このコードはsshキーの設定を行っています。最初の <code>openssl ....</code>は先程作成した <code>deploy_key.enc</code>を復号化するためのコマンドです。それ以下では復号した <code>deploy_key</code>をsshキーとして使う設定を行っています。<br><code>before_install</code>は以下の <code>script</code>の前に実行されます。</p>\n<p>最後に <code>script</code>についてです。といってもこれについては解説する意味もなさそうですね。笑<br>ただ、hemlにコンパイルを行い、それらをdeployするだけです。</p>\n<h2 id=\"自動デプロイしてみる\"><a href=\"#自動デプロイしてみる\" class=\"headerlink\" title=\"自動デプロイしてみる\"></a>自動デプロイしてみる</h2><p>それではここまでが終わったら、<code>deploy</code>ブランチにプッシュしてみましょう。<br>そうすると <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">travis</a>のページを確認するとCIが走っているのが確認出来ると思います。<br>もし、ログインしていない場合は travisにGithubアカウントでログインしてみましょう。</p>\n<p>もし、CIがうまくはしればmasterにデプロイが完了しているはずです。<br>お疲れさまです。</p>\n<h2 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h2><p>今回は自分がこのブログを構築するためにした設定についてのブログを書いてみました。<br>もし、読んでいる人の参考になればとても嬉しいです。</p>\n<h2 id=\"もしバグが起こった場合\"><a href=\"#もしバグが起こった場合\" class=\"headerlink\" title=\"もしバグが起こった場合\"></a>もしバグが起こった場合</h2><p>Travisで以下のようなエラーが起った場合についてです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iv undefined</span><br><span class=\"line\">The command &quot;openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv -in deploy_key.enc -out ./deploy_key -d&quot; failed and exited with 1 during .</span><br></pre></td></tr></table></figure>\n\n<p>これについては<a href=\"https://github.com/travis-ci/travis.rb/issues/607\" target=\"_blank\" rel=\"noopener\">このissue</a>が参考になりました。<br>僕の場合の解決方法です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ travis encrypt-file ./deploy_key --pro</span><br></pre></td></tr></table></figure>\n\n<p>これを実行したときに出てくる <code>openssl ...</code> をtravis.ymlの同じ部分を置き換えて、新しくできた <code>deploy_key.enc</code> と一緒にプッシュしてみましょう。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck2ir9efy000206hs976q7pxi","tag_id":"ck2isyf3h000306hs6wu39lyh","_id":"ck2isyf3j000606hs8rb70vgv"},{"post_id":"ck2ir9efy000206hs976q7pxi","tag_id":"ck2isyf3i000406hs9q7125gk","_id":"ck2isyf3j000706hs0zm8blag"},{"post_id":"ck2ir9efy000206hs976q7pxi","tag_id":"ck2isyf3j000506hs9hsd7ziu","_id":"ck2isyf3j000806hshtbx0v5b"}],"Tag":[{"name":"hexo","_id":"ck2isyf3h000306hs6wu39lyh"},{"name":"Github Pages","_id":"ck2isyf3i000406hs9q7125gk"},{"name":"travis","_id":"ck2isyf3j000506hs9hsd7ziu"}]}}